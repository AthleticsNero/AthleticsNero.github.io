<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RGB灯带做棋盘的双人五子棋游戏</title>
      <link href="/2019/08/26/gomoku/"/>
      <url>/2019/08/26/gomoku/</url>
      
        <content type="html"><![CDATA[<h1 id="RGB灯带做棋盘的双人五子棋游戏"><a href="#RGB灯带做棋盘的双人五子棋游戏" class="headerlink" title="RGB灯带做棋盘的双人五子棋游戏"></a>RGB灯带做棋盘的双人五子棋游戏</h1><p>这是我短学期的任务,做的简陋，勉强能实现主要功能，写了技术文档，记录一下。</p><h2 id="一、-项目简介"><a href="#一、-项目简介" class="headerlink" title="一、    项目简介"></a>一、    项目简介</h2><p>本项目综合arduino、flutter、node-red以及mqtt协议开发一个可供电脑端和手机端共同游戏的五子棋游戏，并将游戏实时显示在RGB灯带组成的棋盘上。</p><h2 id="二、-项目准备"><a href="#二、-项目准备" class="headerlink" title="二、 项目准备"></a>二、 项目准备</h2><p>所需的材料：ESP32一个、WS2812灯带共225个灯珠、杜邦线若干、5v电源、变压箱、面包板。</p><p>所做的准备：搭建MQTT服务器、arduino开发环境及FastLED库，Flutter应用框架，node-red节点开发环境。</p><h2 id="三、-棋盘的制作"><a href="#三、-棋盘的制作" class="headerlink" title="三、 棋盘的制作"></a>三、 棋盘的制作</h2><p><img src="/26/gomoku/led.jpg" alt=""><br>灯带走单总线协议，为了做成15*15的棋盘，需要在每15个灯珠处剪断，并焊接连接。并且每两行单独供电，防止走单总线串联而产生供电不足的问题，（如上图所示，第二条和第三条间只焊接数据线，供电线在第三条上连接面包板），面包板处供电连接变压箱，设定5V，棋盘首部数据传输线连接esp32的12号引脚（可自行设定），esp32由外部电源供电。</p><h2 id="四、-Arduino的开发"><a href="#四、-Arduino的开发" class="headerlink" title="四、    Arduino的开发"></a>四、    Arduino的开发</h2><p>这里使用ESP32开发板，开发前请先下载并选用该开发板。</p><p>加载将使用的库：</p><ol><li>FastLED库控制灯带的显示。</li><li>WiFi库将ESP32连接到热点。</li><li>PubSubClient库用于mqtt通信。    </li></ol><h3 id="1-Wifi的连接："><a href="#1-Wifi的连接：" class="headerlink" title="1.    Wifi的连接："></a>1.    Wifi的连接：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WiFi.h&gt;//先导入库</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ssid = <span class="string">"xxxx"</span>;<span class="comment">//WiFi的ssid和密码常量定义</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* password = <span class="string">"xxxx"</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Serial.begin(<span class="number">115200</span>);</span><br><span class="line">setup_wifi();<span class="comment">//初始化函数调用启动wifi函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup_wifi</span><span class="params">()</span></span>&#123;</span><br><span class="line">    delay(<span class="number">10</span>);</span><br><span class="line">    Serial.println();</span><br><span class="line">    Serial.print(<span class="string">"Connecting to "</span>);</span><br><span class="line">    Serial.println(ssid);</span><br><span class="line">    WiFi.begin(ssid,password);</span><br><span class="line">    <span class="keyword">while</span>(WiFi.status()!=WL_CONNECTED)&#123;</span><br><span class="line">        delay(<span class="number">500</span>);</span><br><span class="line">        Serial.print(<span class="string">"."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Serial.println(<span class="string">""</span>);</span><br><span class="line">    Serial.println(<span class="string">"WiFi connected"</span>);<span class="comment">//连接成功后显示IP信息</span></span><br><span class="line">    Serial.println(<span class="string">"IP address:"</span>);</span><br><span class="line">    Serial.println(WiFi.localIP());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-MQTT服务器的连接："><a href="#2-MQTT服务器的连接：" class="headerlink" title="2.    MQTT服务器的连接："></a>2.    MQTT服务器的连接：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;PubSubClient.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* mqtt_server = <span class="string">"xxxx"</span>;</span><br><span class="line">WiFiClient espClient;</span><br><span class="line"><span class="function">PubSubClient <span class="title">client</span><span class="params">(espClient)</span></span>;</span><br><span class="line"><span class="function">Void <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    client.setServer(mqtt_server,<span class="number">1883</span>);</span><br><span class="line">    client.setCallback(callback);<span class="comment">//设置回调函数，每次接收到信//息都执行callback函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reconnect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!client.connected())&#123;</span><br><span class="line">        Serial.print(<span class="string">"Attempting MQTT connection..."</span>);</span><br><span class="line">        <span class="keyword">if</span>(client.connect(<span class="string">"ESP32Client"</span>))&#123;</span><br><span class="line">            Serial.println(<span class="string">"connected"</span>);</span><br><span class="line">            client.subscribe(<span class="string">"player2"</span>);<span class="comment">//订阅两个玩家的主题</span></span><br><span class="line">        client.subscribe(<span class="string">"player1"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Serial.print(<span class="string">"failed,rc="</span>);</span><br><span class="line">            Serial.print(client.state());</span><br><span class="line">            Serial.println(<span class="string">" try again in 5 seconds"</span>);</span><br><span class="line">            delay(<span class="number">5000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!client.connected())&#123;<span class="comment">//客户端连接断开后执行重连</span></span><br><span class="line">        reconnect();</span><br><span class="line">    &#125;</span><br><span class="line">    client.loop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-回调函数："><a href="#3-回调函数：" class="headerlink" title="3.    回调函数："></a>3.    回调函数：</h3><p>回调函数中要根据接收到的消息来控制灯的显示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;FastLED.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN 12<span class="comment">//引脚</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLED 225<span class="comment">//最大灯数</span></span></span><br><span class="line">CRGB leds[MAXLED];<span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> exist[<span class="number">225</span>];<span class="comment">//记录棋子信息，避免重复下棋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FastLED.addLeds&lt;WS2812,PIN, GRB&gt;(leds, MAXLED);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callback</span><span class="params">(<span class="keyword">char</span>* topic,byte* payload,<span class="keyword">unsigned</span> <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>,j=<span class="number">0</span>;  <span class="comment">//pos代表棋子位置数字                 </span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;length)&#123; <span class="comment">//这一段的处理将字节类型的传入数据转化成int类型数字</span></span><br><span class="line">        pos=pos*<span class="number">10</span>+(<span class="keyword">int</span>)((<span class="keyword">char</span>)payload[j]-<span class="string">'0'</span>);</span><br><span class="line">        Serial.print((<span class="keyword">char</span>)payload[j]);</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">255</span>)&#123;<span class="comment">//设定玩家一赢时传入255</span></span><br><span class="line">        fill_solid(leds,MAXLED, CRGB::Red);<span class="comment">//将灯全部置为红色表面玩家一胜利</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pos==<span class="number">256</span>)&#123;<span class="comment">//玩家二赢时传入256</span></span><br><span class="line">        fill_solid(leds,MAXLED, CRGB::Green);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">/*因为灯带数据传输的方向是一条线，所以会导致第15盏灯在第二行的最后一个位置，第二行的第一盏灯却是第29盏灯，这点在处理时必须注意逻辑*/</span></span><br><span class="line">        <span class="keyword">if</span>((pos/<span class="number">15</span>)%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            pos=(pos/<span class="number">15</span>+<span class="number">1</span>)*<span class="number">15</span><span class="number">-1</span>-(pos%<span class="number">15</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//如果玩家传入的位置还未下子，就该点亮起红色且加入存在信息，再次下同样位置就不会执行</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(topic,<span class="string">"player1"</span>)==<span class="number">0</span>&amp;&amp;exist[pos]==<span class="number">0</span>)&#123;</span><br><span class="line">            leds[pos]=CRGB(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">            exist[pos]=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(topic,<span class="string">"player2"</span>)==<span class="number">0</span>&amp;&amp;exist[pos]==<span class="number">0</span>)&#123;</span><br><span class="line">            leds[pos]=CRGB(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>);</span><br><span class="line">            exist[pos]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FastLED.show();<span class="comment">//输出灯的信息</span></span><br><span class="line">    delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全部代码如上，可借助串口监视器观察是否连接成功以及棋子的位置信息。</p><h2 id="五、-AI-Node上Dashboard的开发"><a href="#五、-AI-Node上Dashboard的开发" class="headerlink" title="五、    AI-Node上Dashboard的开发"></a>五、    AI-Node上Dashboard的开发</h2><p><img src="/26/gomoku/flow.png" alt=""><br>棋盘节点接收player2（手机端）的mqtt消息，并传出以player1作主题的mqtt消息。<br><img src="/26/gomoku/chessboard1.png" alt=""><br>这是最终做成的棋盘，点击格子下棋，player1的棋子红色，player2的棋子绿色。</p><h3 id="1-棋盘绘制"><a href="#1-棋盘绘制" class="headerlink" title="1.    棋盘绘制"></a>1.    棋盘绘制</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"table_content"</span> <span class="attr">style</span>=<span class="string">"width: 550px; margin: 0 auto;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是整体棋盘，设定了宽度，内部细节写在script标签里，目的是为了动态产生带独特ID（位置信息）的表格元素。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"enda"</span> <span class="attr">style</span>=<span class="string">"width:100px;margin-left:350px;margin-top:50px;display:none"</span> <span class="attr">ng-click</span>=<span class="string">"send(&#123;payload:'255'&#125;)"</span>&gt;</span>结束游戏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"endb"</span> <span class="attr">style</span>=<span class="string">"width:100px;margin-left:350px;margin-top:50px;display:none"</span> <span class="attr">ng-click</span>=<span class="string">"send(&#123;payload:'256'&#125;)"</span>&gt;</span>结束游戏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>两个结束按钮，当某一玩家获胜时出现对应按钮，用于宣告胜利，传给esp32胜利信息。通过display：none实现在游戏中隐藏，获胜时修改display值便可使其显现。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"table_content"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> code = <span class="string">'&lt;table border=\"1px\"'</span> + <span class="string">'style=\"border-collapse: collapse;\"&gt;'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> i,j;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (i=<span class="number">0</span>;i &lt; <span class="number">15</span> ;i++ )&#123;</span></span><br><span class="line"><span class="javascript">    code+= <span class="string">"&lt;tr&gt;"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (j=<span class="number">0</span>;j &lt; <span class="number">15</span> ;j++ )&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> id;</span></span><br><span class="line"><span class="undefined">        id = i*15+j;</span></span><br><span class="line"><span class="javascript"><span class="comment">//每个格子带上id值，单击发送数据即id值，同时调用clickBorder1函数，改变格子颜色。</span></span></span><br><span class="line"><span class="xml">        code += "<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">\</span>"<span class="attr">30px</span>\" <span class="attr">height</span>=<span class="string">\</span>"<span class="attr">30px</span>\" <span class="attr">id</span>=<span class="string">\</span>"" + <span class="attr">id</span> + "\"<span class="attr">ng-click</span>=<span class="string">\</span>"<span class="attr">send</span>(&#123;<span class="attr">payload:</span>"+<span class="attr">id</span>+"&#125;)\" <span class="attr">onclick</span>=<span class="string">'clickBorder1(" + id + ");'</span>&gt;</span>";</span></span><br><span class="line"><span class="javascript">        code += <span class="string">"&lt;/td&gt;"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    code+=<span class="string">"&lt;/tr&gt;"</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">    code += <span class="string">"&lt;/table&gt;"</span>;</span></span><br><span class="line"><span class="undefined">    div1.innerHTML = code;</span></span><br></pre></td></tr></table></figure></p><p>将html标签写在js中，更加灵活便捷。</p><h3 id="2-落子函数"><a href="#2-落子函数" class="headerlink" title="2. 落子函数"></a>2. 落子函数</h3><p>（以玩家1为例，玩家2同理）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ids = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//该数组记录棋格上有无棋子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickBorder1</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ids.length ;i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> (ids[i] == id) &#123;</span><br><span class="line">                alert(<span class="string">"此处已落子！"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="built_in">document</span>.getElementById(id).style.background=<span class="string">"#f00"</span>;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(id).style.color=<span class="string">"#f00"</span>;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(id).innerHTML=<span class="string">"O"</span>;</span><br><span class="line">        <span class="comment">//用O和X表示棋子信息，方便判断胜利条件，设定字体颜色和背景相同即可。</span></span><br><span class="line">        ids.push(id);<span class="comment">//用ids数组记录棋格棋子有无</span></span><br><span class="line">        iswina(<span class="built_in">Math</span>.round(id/<span class="number">15</span>),<span class="built_in">Math</span>.round(id%<span class="number">15</span>));</span><br><span class="line">        <span class="comment">//该函数判断是否胜利，参数为此棋子的行列位置。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-胜利判断"><a href="#3-胜利判断" class="headerlink" title="3. 胜利判断"></a>3. 胜利判断</h3><p>每次记录最后一个下的棋子的行列位置，通过判断其八个方向有无足够棋子达成五连珠来判断胜利。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iswina</span>(<span class="params">i,j</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>];<span class="comment">//各个方向已有相邻棋子数</span></span><br><span class="line">    <span class="keyword">var</span> state=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>];<span class="comment">//各个方向若无子或其他子就赋值为2终止该方向的判定。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> step=<span class="number">1</span>;step&lt;<span class="number">5</span>;step++)&#123;<span class="comment">//设定步长，最多四格</span></span><br><span class="line"><span class="keyword">if</span>(state[<span class="number">0</span>]==<span class="number">1</span>&amp;&amp;i-step&gt;=<span class="number">0</span>&amp;&amp;j-step&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementById((i-step)*<span class="number">15</span>+j-step).innerHTML==<span class="string">'O'</span>)&#123;</span><br><span class="line">                count[<span class="number">0</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                state[<span class="number">0</span>]=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;<span class="comment">//左上</span></span><br><span class="line"><span class="keyword">if</span>(state[<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;i-step&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementById((i-step)*<span class="number">15</span>+j).innerHTML==<span class="string">'O'</span>)&#123;</span><br><span class="line">                count[<span class="number">1</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                state[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;<span class="comment">//上</span></span><br><span class="line"><span class="keyword">if</span>(state[<span class="number">2</span>]==<span class="number">1</span>&amp;&amp;i-step&gt;=<span class="number">0</span>&amp;&amp;j+step&lt;<span class="number">15</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementById((i-step)*<span class="number">15</span>+j+step).innerHTML==<span class="string">'O'</span>)&#123;</span><br><span class="line">                count[<span class="number">2</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                state[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;<span class="comment">//右上</span></span><br><span class="line"><span class="keyword">if</span>(state[<span class="number">3</span>]==<span class="number">1</span>&amp;&amp;j+step&lt;<span class="number">15</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(i*<span class="number">15</span>+j+step).innerHTML==<span class="string">'O'</span>)&#123;</span><br><span class="line">                count[<span class="number">3</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                state[<span class="number">3</span>]=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;<span class="comment">//右</span></span><br><span class="line"><span class="keyword">if</span>(state[<span class="number">4</span>]==<span class="number">1</span>&amp;&amp;i+step&lt;<span class="number">15</span>&amp;&amp;j+step&lt;<span class="number">15</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById((i+step)*<span class="number">15</span>+j+step).innerHTML==<span class="string">'O'</span>)&#123;</span><br><span class="line">                count[<span class="number">4</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                state[<span class="number">4</span>]=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;<span class="comment">//右下</span></span><br><span class="line"><span class="keyword">if</span>(state[<span class="number">5</span>]==<span class="number">1</span>&amp;&amp;i+step&lt;<span class="number">15</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById((i+step)*<span class="number">15</span>+j).innerHTML==<span class="string">'O'</span>)&#123;</span><br><span class="line">                count[<span class="number">5</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                state[<span class="number">5</span>]=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;<span class="comment">//下</span></span><br><span class="line"><span class="keyword">if</span>(state[<span class="number">6</span>]==<span class="number">1</span>&amp;&amp;i+step&lt;<span class="number">15</span>&amp;&amp;j-step&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementById((i+step)*<span class="number">15</span>+j-step).innerHTML==<span class="string">'O'</span>)&#123;</span><br><span class="line">                count[<span class="number">6</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                state[<span class="number">6</span>]=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;<span class="comment">//左下</span></span><br><span class="line"><span class="keyword">if</span>(state[<span class="number">7</span>]==<span class="number">1</span>&amp;&amp;j-step&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(i*<span class="number">15</span>+j-step).innerHTML==<span class="string">'O'</span>)&#123;count[<span class="number">7</span>]++;&#125;<span class="keyword">else</span>&#123;state[<span class="number">7</span>]=<span class="number">2</span>;&#125;</span><br><span class="line">&#125;<span class="comment">//左</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同一条线加上该子，大于等于5个即胜利</span></span><br><span class="line">    <span class="keyword">if</span>((count[<span class="number">0</span>]+count[<span class="number">4</span>]+<span class="number">1</span>)&gt;=<span class="number">5</span>||(count[<span class="number">1</span>]+count[<span class="number">5</span>]+<span class="number">1</span>)&gt;=<span class="number">5</span>||(count[<span class="number">2</span>]+count[<span class="number">6</span>]+<span class="number">1</span>)&gt;=<span class="number">5</span>||(count[<span class="number">3</span>]+count[<span class="number">7</span>]+<span class="number">1</span>)&gt;=<span class="number">5</span>)&#123;</span><br><span class="line">alert(<span class="string">'五连珠，电脑胜'</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'enda'</span>).style.display=<span class="string">"block"</span>;</span><br><span class="line"><span class="comment">//跳出胜利信息，并出现结束游戏按钮</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-作用域"><a href="#4-作用域" class="headerlink" title="4. 作用域"></a>4. 作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">scope</span>) </span>&#123;</span><br><span class="line">   scope.$watch(<span class="string">'msg.payload'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'- Scope.msg -'</span>)</span><br><span class="line">     <span class="built_in">console</span>.dir(scope.msg)</span><br><span class="line">     clickBorder2(scope.msg[<span class="string">"payload"</span>]);</span><br><span class="line"><span class="comment">//接收玩家二传入的信息</span></span><br><span class="line">   &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)(scope)</span><br></pre></td></tr></table></figure><h2 id="六、-Flutter应用的开发"><a href="#六、-Flutter应用的开发" class="headerlink" title="六、    Flutter应用的开发"></a>六、    Flutter应用的开发</h2><h3 id="1-mqtt依赖"><a href="#1-mqtt依赖" class="headerlink" title="1. mqtt依赖"></a>1. mqtt依赖</h3><p>首先新建一个项目，在pubspec.yaml文件dependencies中加入mqtt应用依赖</p><blockquote><p>mqtt_client: ^5.5.3</p></blockquote><p>然后点击右上角 Package get 获取相关的依赖.</p><p>完成之后在lib目录下新建一个package，并且新建一个dart文件message.dart,在里面黏上下面的代码：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:mqtt_client/mqtt_client.dart'</span> <span class="keyword">as</span> mqtt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">String</span> topic;</span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">String</span> message;</span><br><span class="line"> <span class="keyword">final</span> mqtt.MqttQos qos;</span><br><span class="line"></span><br><span class="line"> Message(&#123;<span class="keyword">this</span>.topic, <span class="keyword">this</span>.message, <span class="keyword">this</span>.qos&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个是一个mqtt消息的类，里面有一个消息的主题、内容和Qos。</p><h3 id="2-导入相关库"><a href="#2-导入相关库" class="headerlink" title="2. 导入相关库"></a>2. 导入相关库</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:mqtt_client/mqtt_client.dart'</span> <span class="keyword">as</span> mqtt;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'models/message.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'btnsingle.dart'</span>;<span class="comment">//定义棋格类的文件，后面编写</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"><span class="comment">//箭头函数运行Myapp()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">   <span class="keyword">return</span> MaterialApp(</span><br><span class="line">     debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">     title: <span class="string">'Gomoku'</span>,</span><br><span class="line">     home: MyHomePage(title:<span class="string">'Gomoku'</span>),</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line"> MyHomePage(&#123;Key key,<span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key:key);</span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"> <span class="meta">@override</span></span><br><span class="line">_MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建了_MyHomePageState这个state，接下来编写其内容</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>接下来的内容都写在_MyHomePageState中</p><h3 id="2-定义棋格"><a href="#2-定义棋格" class="headerlink" title="2. 定义棋格"></a>2. 定义棋格</h3><p><img src="/26/gomoku/手机1.png" alt=""><br>与dashboard上每个格子带id相同，这里的每个格子也都有id值，在批量生成棋格的时候，我选择了二维数组，以行为单位，每行带15格，共15行。<br>单独写个dart文件来定义棋格类。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="built_in">int</span> chose;</span><br><span class="line"><span class="built_in">String</span> come;</span><br><span class="line"><span class="built_in">bool</span> luozi;<span class="comment">//是否有落子，用于判断玩家取消下子位置</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BtnSingle</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">//传入参数isAnchoosed，如果为真，则代表玩家一的棋子</span></span><br><span class="line">  <span class="comment">//参数isChoosed如果为真，则代表玩家二的棋子</span></span><br><span class="line">  BtnSingle(&#123; Key key,<span class="keyword">this</span>.id,<span class="keyword">this</span>.isAnchoosed&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> id;</span><br><span class="line">  <span class="built_in">bool</span> isChoosed = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> isAnchoosed ;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _BtnSingle createState() =&gt; <span class="keyword">new</span> _BtnSingle();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BtnSingle</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BtnSingle</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">new</span> Container(</span><br><span class="line">        width: <span class="number">26</span>,</span><br><span class="line">        height: <span class="number">26</span>,</span><br><span class="line">        color: Color(<span class="number">0xFFFFFFFF</span>),</span><br><span class="line">        child:<span class="keyword">new</span> FlatButton(</span><br><span class="line"><span class="comment">//棋格无人选中为白色，玩家二选中为绿色，玩家一所下为红色</span></span><br><span class="line">        color: widget.isChoosed ? Color(<span class="number">0xFF00FF00</span>):(widget.isAnchoosed?Color(<span class="number">0xFFFF0000</span>):Color(<span class="number">0xFFFFFFFF</span>)),</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line">                setState(() &#123;</span><br><span class="line">                    chose = widget.id;<span class="comment">//获取该子位置</span></span><br><span class="line">                    widget.isChoosed = !widget.isChoosed;<span class="comment">//更改选中标记</span></span><br><span class="line">                    <span class="keyword">if</span>(widget.isChoosed) luozi=<span class="keyword">true</span>;<span class="comment">//如果当前选中状态，标记准备落子</span></span><br><span class="line">                    <span class="keyword">else</span> luozi=<span class="keyword">false</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">              shape: RoundedRectangleBorder(</span><br><span class="line">                  side: BorderSide(</span><br><span class="line">                      color: Color(<span class="number">0xFF000000</span>),</span><br><span class="line">                      style: BorderStyle.solid,width: <span class="number">1</span></span><br><span class="line">                  )</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成单行棋格，列表类型</span></span><br><span class="line"><span class="comment">//isAnchoosed是传入的bool类型参数，若为真代表则是player1所下，初始化都赋值为false</span></span><br><span class="line"><span class="built_in">List</span>&lt;BtnSingle&gt; initBtnSingle(<span class="built_in">int</span> i)&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;BtnSingle&gt; listbtn = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">  <span class="built_in">int</span> j;</span><br><span class="line">  <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">15</span>;j++)&#123;</span><br><span class="line">    listbtn.add(<span class="keyword">new</span> BtnSingle(id: i*<span class="number">15</span>+j,isAnchoosed:<span class="keyword">false</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> listbtn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;BtnSingle&gt;&gt; initBtnRow()&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;BtnSingle&gt;&gt; listrow = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++)&#123;</span><br><span class="line">    listrow.add(initBtnSingle(i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> listrow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-生成-MyHomePageState内棋盘"><a href="#3-生成-MyHomePageState内棋盘" class="headerlink" title="3. 生成_MyHomePageState内棋盘"></a>3. 生成_MyHomePageState内棋盘</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: (</span><br><span class="line">          Column(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line"><span class="comment">//每一行都是列表，内有15个棋格</span></span><br><span class="line">              <span class="keyword">new</span> Row(</span><br><span class="line">                children: list[<span class="number">0</span>]</span><br><span class="line">              ),</span><br><span class="line">              ....<span class="comment">//重复13个，只改变list后面数字就行</span></span><br><span class="line">              <span class="keyword">new</span> Row(</span><br><span class="line">                children: list[<span class="number">14</span>]</span><br><span class="line">              ),</span><br><span class="line">              <span class="keyword">new</span> Wrap(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  <span class="keyword">new</span> Container(</span><br><span class="line">                    padding: EdgeInsets.fromLTRB(<span class="number">75</span>, <span class="number">4</span>, <span class="number">20</span>, <span class="number">4</span>),</span><br><span class="line">                    child:</span><br><span class="line"><span class="comment">//确定按钮，触碰并不代表落子，为的是防止误触，只有在选中后再按确定才算落子。</span></span><br><span class="line">                    RaisedButton(</span><br><span class="line">                        child: Text(<span class="string">'确定'</span>),</span><br><span class="line">                        onPressed: () &#123;</span><br><span class="line">                          <span class="keyword">if</span>(luozi)&#123;<span class="comment">//确定在此处下子</span></span><br><span class="line">                            _pubMsg = chose.toString();</span><br><span class="line">                            _pubMessage();</span><br><span class="line">                          &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                  <span class="keyword">new</span> Container(</span><br><span class="line">                    padding: EdgeInsets.fromLTRB(<span class="number">20</span>, <span class="number">4</span>, <span class="number">100</span>, <span class="number">4</span>),</span><br><span class="line"><span class="comment">//接收按钮启动监听，在游戏开始时按下</span></span><br><span class="line">                    child:RaisedButton(</span><br><span class="line">                      child: Text(<span class="string">'接收'</span>),</span><br><span class="line">                      onPressed: ()&#123;</span><br><span class="line">                        _subMessage();</span><br><span class="line">                      &#125;,</span><br><span class="line">                    )</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">                ],</span><br><span class="line">              )</span><br><span class="line">          )</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4-引入mqtt相关参数"><a href="#4-引入mqtt相关参数" class="headerlink" title="4. 引入mqtt相关参数"></a>4. 引入mqtt相关参数</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> _pubTopic = <span class="string">'player2'</span>;<span class="comment">//作为player2发布消息</span></span><br><span class="line"><span class="built_in">String</span> _pubMsg;<span class="comment">//发布消息的内容是字符串类型</span></span><br><span class="line"><span class="built_in">String</span> _subTopic = <span class="string">'player1'</span>;<span class="comment">//订阅player1的消息</span></span><br><span class="line"><span class="built_in">bool</span> _retainValue = <span class="keyword">false</span>;</span><br><span class="line">ScrollController subMsgScrollController = <span class="keyword">new</span> ScrollController();</span><br><span class="line"><span class="built_in">String</span> broker = <span class="string">'xxxx'</span>;<span class="comment">//xxxx改为mqtt服务器地址</span></span><br><span class="line">mqtt.MqttClient client;</span><br><span class="line">mqtt.MqttConnectionState connectionState;</span><br><span class="line">StreamSubscription subscription;</span><br><span class="line"><span class="built_in">List</span>&lt;Message&gt; messages = &lt;Message&gt;[];</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> initState()&#123;</span><br><span class="line">   <span class="keyword">super</span>.initState();</span><br><span class="line">   _connect();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化函数，执行_connect()连接</span></span><br><span class="line"><span class="keyword">void</span> _connect() <span class="keyword">async</span>&#123;</span><br><span class="line">    <span class="comment">//client连接的初始化配置</span></span><br><span class="line">    <span class="comment">//默认端口1883，如果不是1883就采用</span></span><br><span class="line">    <span class="comment">//client = mqtt.MqttClient.withPort(broker, '',1883);</span></span><br><span class="line">    client = mqtt.MqttClient(broker,<span class="string">''</span>);</span><br><span class="line">    client.logging(on: <span class="keyword">true</span>);</span><br><span class="line">    client.keepAlivePeriod = <span class="number">30</span>;</span><br><span class="line">    client.onDisconnected = _onDisconnected;</span><br><span class="line">    <span class="keyword">final</span> mqtt.MqttConnectMessage connMess = mqtt.MqttConnectMessage()</span><br><span class="line">        .withClientIdentifier(<span class="string">'webberFlutter'</span>)<span class="comment">//连接mqtt使用的id</span></span><br><span class="line">        .startClean()</span><br><span class="line">        .keepAliveFor(<span class="number">30</span>)</span><br><span class="line">        .withWillTopic(<span class="string">'willtopic'</span>)</span><br><span class="line">        .withWillMessage(<span class="string">'My Will message'</span>)</span><br><span class="line">        .withWillQos(mqtt.MqttQos.atLeastOnce);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'MQTT client connecting....'</span>);</span><br><span class="line">    client.connectionMessage = connMess;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> client.connect();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">print</span>(e);</span><br><span class="line">      _disconnect();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (client.connectionState == mqtt.MqttConnectionState.connected) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'MQTT client connected'</span>);</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        connectionState = client.connectionState;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'ERROR: MQTT client connection failed - '</span></span><br><span class="line">          <span class="string">'disconnecting, state is <span class="subst">$&#123;client.connectionState&#125;</span>'</span>);</span><br><span class="line">      _disconnect();</span><br><span class="line">    &#125;</span><br><span class="line">    subscription = client.updates.listen(_onMessage);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//处理连接失败的情况</span></span><br><span class="line">  <span class="keyword">void</span> _disconnect() &#123;</span><br><span class="line">    client.disconnect();</span><br><span class="line">    _onDisconnected();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> _onDisconnected() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      connectionState = client.connectionState;</span><br><span class="line">      client = <span class="keyword">null</span>;</span><br><span class="line">      subscription.cancel();</span><br><span class="line">      subscription = <span class="keyword">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'MQTT client disconnected'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//_onMessage函数处理传入的信息</span></span><br><span class="line"><span class="keyword">void</span> _onMessage(<span class="built_in">List</span>&lt;mqtt.MqttReceivedMessage&gt; event) &#123;</span><br><span class="line">    <span class="built_in">print</span>(event.length);</span><br><span class="line">    <span class="built_in">print</span>(event[<span class="number">0</span>].topic);</span><br><span class="line">    <span class="keyword">final</span> mqtt.MqttPublishMessage recMess = event[<span class="number">0</span>].payload <span class="keyword">as</span> mqtt.MqttPublishMessage;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> message = mqtt.MqttPublishPayload.bytesToStringAsString(recMess.payload.message);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'MQTT message: topic is &lt;<span class="subst">$&#123;event[<span class="number">0</span>].topic&#125;</span>&gt;, '</span></span><br><span class="line">        <span class="string">'payload is &lt;-- <span class="subst">$&#123;message&#125;</span> --&gt;'</span>);</span><br><span class="line">    <span class="built_in">print</span>(client.connectionState);</span><br><span class="line">    setState(() &#123;</span><br><span class="line">        <span class="keyword">if</span>(event[<span class="number">0</span>].topic==<span class="string">'player1'</span>)&#123;</span><br><span class="line">          come = message;</span><br><span class="line">          <span class="built_in">print</span>(<span class="built_in">int</span>.parse(come));</span><br><span class="line">          <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">225</span>;i++)&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="built_in">int</span>.parse(come)==list[i~/<span class="number">15</span>][i%<span class="number">15</span>].id&amp;&amp;!list[i~/<span class="number">15</span>][i%<span class="number">15</span>].isChoosed)&#123;</span><br><span class="line">              BtnSingle btnSingle = <span class="keyword">new</span> BtnSingle(id:<span class="built_in">int</span>.parse(come) ,isAnchoosed: <span class="keyword">true</span>);</span><br><span class="line">              <span class="built_in">print</span>(list[i~/<span class="number">15</span>][i%<span class="number">15</span>].id);</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">"i am here!"</span>);</span><br><span class="line">              <span class="built_in">print</span>(list[i~/<span class="number">15</span>][i%<span class="number">15</span>].isAnchoosed);</span><br><span class="line">              list[i~/<span class="number">15</span>][i%<span class="number">15</span>] = btnSingle;</span><br><span class="line">              <span class="built_in">print</span>(list[i~/<span class="number">15</span>][i%<span class="number">15</span>].isAnchoosed);</span><br><span class="line"><span class="comment">//接收到玩家一棋子信息后，直接替换棋格，其isAnchoosed值为真，代表玩家一所下</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">void</span> _subMessage()&#123;</span><br><span class="line">    <span class="comment">//开始接收subtopic的submessage</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"on sub message"</span>);</span><br><span class="line">      <span class="keyword">if</span>(connectionState == mqtt.MqttConnectionState.connected)&#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">'subscribe to <span class="subst">$&#123;_subTopic&#125;</span>'</span>);</span><br><span class="line">          client.subscribe(_subTopic, mqtt.MqttQos.exactlyOnce);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> _pubMessage()&#123;</span><br><span class="line">    <span class="comment">//发布消息</span></span><br><span class="line">      <span class="keyword">final</span> mqtt.MqttClientPayloadBuilder builder =</span><br><span class="line">      mqtt.MqttClientPayloadBuilder();</span><br><span class="line">      builder.addString(_pubMsg);</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"pub message <span class="subst">$&#123;_pubTopic&#125;</span>:<span class="subst">$&#123;_pubMsg&#125;</span>"</span>);</span><br><span class="line">      client.publishMessage(</span><br><span class="line">        _pubTopic,</span><br><span class="line">        mqtt.MqttQos.values[<span class="number">0</span>],</span><br><span class="line">        builder.payload,</span><br><span class="line">        retain: _retainValue,</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>至此flutter应用开发完毕。<br>启动APP和node-red，给esp32通电并连接棋盘，保证wifi和mqtt连接都成功的情况下，便可以进行五子棋游戏。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> html </tag>
            
            <tag> arduino </tag>
            
            <tag> javascript </tag>
            
            <tag> esp32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装卡死及关机卡死解决方法</title>
      <link href="/2019/08/12/ubuntu2/"/>
      <url>/2019/08/12/ubuntu2/</url>
      
        <content type="html"><![CDATA[<h2 id="Ubuntu安装界面卡住"><a href="#Ubuntu安装界面卡住" class="headerlink" title="Ubuntu安装界面卡住"></a>Ubuntu安装界面卡住</h2><p>给笔记本安装ubuntu的时候一直有这个问题，在安装界面就直接卡死，鼠标能动，但啥都不能点。</p><p>实际上是由于我的显卡是GTX1060，是在1050ti以上，而ubuntu与n卡的高版本兼容性不好才导致卡死。</p><a id="more"></a><p>这时候的处理方法是：</p><p>1.在系统选择安装ubuntu界面，选到install ubuntu，但不要按enter键进入，而是按E。</p><p>2.这时候进入一个界面，找到quiet splash后面的“—”，把它删除，并改成“nomodeset”，然后按F10启动，按正常步骤安装ubuntu。</p><p>3.安装完成后它会提示要重启电脑，这次选择ubuntu，还是按E进入一个编辑界面，找到splash那一行，把它后面的删除即可（仅该行），再按F10启动。</p><h2 id="Ubuntu关机卡死"><a href="#Ubuntu关机卡死" class="headerlink" title="Ubuntu关机卡死"></a>Ubuntu关机卡死</h2><p>一按关机就全屏卡死，这个问题的原因还是因为显卡版本高了（据说19.04版本没这个问题）</p><p>解决办法：</p><p>1.进入ubuntu，点开软件和更新，打开ubuntu软件，找到下载自，后面选择aliyun的源。然后点退出，这时候它会要求你下载相应的包之类的，下载就好。</p><p>2.下载完后回到前面的界面，点击附加驱动，加载完成后，选择来自NVIDIA的驱动，作为专用驱动，然后点击应用更改就好了。</p><hr><p>今天大费周章才安装上双系统，有点笨，好在最后搞好了也没必要再重新配windows的环境。</p><p>原来的固态250g，只用作win10，现在用一块480g的固态，一半做ubuntu，另一半打算沿用之前的系统。不巧的是，我电脑只有一个固态位。虽然重装系统会很简单，但一个全新的系统要做的事就很多了。</p><p>最后我做的是，用wepe的CFI备份还原工具，先复制我的固态整个磁盘到一个镜像文件，然后换另一块固态，再还原到新固态上，<strong>还原是覆盖还原，会先格式化新固态上。按理说新固态是空的不影响，我当时却事先安装了ubuntu，于是重复了第二遍安装</strong></p><p>还原之后会发现启动不了，电脑会蓝屏报错，这是引导的问题。</p><p>还是用wepe工具，里面有个UEFI引导修复，由disk genuines工具可看到系统盘的ESP分区的盘符，在这里就选择这个盘符，系统根目录选择C：windows（盘符根据实际情况来，我当时还原在了M），然后修复引导就行了。</p>]]></content>
      
      
      <categories>
          
          <category> solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShadowSocksR翻墙</title>
      <link href="/2019/07/23/ssr/"/>
      <url>/2019/07/23/ssr/</url>
      
        <content type="html"><![CDATA[<p>之前有试过购买国外主机来翻墙，当时照着一篇博客做的，觉得也没必要记下来。最近又想翻墙了，自己的主机又早崩了，人家的博客还被封了，想来自己还是有必要记录一下如何翻墙。</p><h2 id="注册Vultr账号"><a href="#注册Vultr账号" class="headerlink" title="注册Vultr账号"></a>注册Vultr账号</h2><p>vultr是一个用于购买国外主机的网站，注册账号这类操作就不必多说了。虽然都说新注册的用户有优惠，但我还是没享受到，也不知为什么可能现在活动过期了。<br><a id="more"></a></p><h2 id="购买主机"><a href="#购买主机" class="headerlink" title="购买主机"></a>购买主机</h2><p>vultr账号购买主机支持微信和支付宝支付。一般购买10刀就是69元。然后就可以去deploy一个主机，这里选用云服务器就行，区域的话我一般选择日本。</p><p><img src="https://github.com/AthleticsNero/AthleticsNero.github.io/blob/master/2019/07/23/ssr/1.png?raw=true" alt=""></p><p>主机类型选择centos就行，标注的是$5每月</p><p><img src="https://github.com/AthleticsNero/AthleticsNero.github.io/blob/master/2019/07/23/ssr/2.png?raw=true" alt=""></p><p>到这里已经可以部署了，后面的选项不是很懂，应该暂时用不到，就没勾。</p><p>部署完毕后可以看到自己的主机处于Running状态，正在运行，以及它的一些信息。</p><p><img src="https://github.com/AthleticsNero/AthleticsNero.github.io/blob/master/2019/07/23/ssr/3.png?raw=true" alt=""></p><h2 id="设置ssr"><a href="#设置ssr" class="headerlink" title="设置ssr"></a>设置ssr</h2><p>这里要用到XShell，用于连接主机。直接百度在官网下，选择学生版即可免费下载使用。当然还有其他方法，一开始照教程用的是xshell我便沿用了这个工具。</p><p>1.新建一个会话，主机部分填入你购买的服务器的IP地址。</p><p>2.新建完成后双击进行主机的连接，如果这时跳出SSH证书的弹窗，给你接收并保存这个按钮选项，就说明这台主机是可以用的，就点这个接收并保存，然后输入用户名和密码（上图所给，复制即可）就连接成功了。如果没有弹出，就说明这个IP被墙了。简而言之就是不能用的，那么就返回前面的步骤再买主机吧。好在买了不用是不会花钱的，顶多花个$0.01，损失也不大。现在被墙的挺多的，可以一次买五台甚至十台去试，虽然有点麻烦，但总能试到一台可以用的。</p><p>3.连接成功后就到了命令窗口，复制下列命令进窗口（要右击粘贴，ctrl+v是没用的），然后回车。</p><p>wget –no-check-certificate <a href="https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</a></p><p>chmod +x shadowsocksR.sh</p><p>./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</p><p>如果在ubuntu可以ssh root@xxx连接服务器</p><p>yum -y install wget</p><p>wget -N –no-check-certificate <a href="https://softs.fun/Bash/ssr.sh" target="_blank" rel="noopener">https://softs.fun/Bash/ssr.sh</a> &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</p><p>以上命令也可。</p><p>4.接下来就是设置ShadowSocksR的参数了，根据它的指示来做就行了。输入密码，输入端口，协议、混淆参数、加密方式这些东西，其实默认就可以了，一直按回车吧。</p><p><img src="https://github.com/AthleticsNero/AthleticsNero.github.io/blob/master/2019/07/23/ssr/4.png?raw=true" alt=""></p><p>成功后如上图显示。</p><h2 id="设定SSR客户端"><a href="#设定SSR客户端" class="headerlink" title="设定SSR客户端"></a>设定SSR客户端</h2><p>SSR小飞机的客户端在github上下载，<a href="https://github.com/shadowsocksr-rm/shadowsocksr-csharp/releases" target="_blank" rel="noopener">下载地址</a>，当然也可以自行下载一个合适的。</p><p>win8以上基本用dotnet4.0版本，双击就在右下角通知栏启动了，点开编辑界面，根据上图填入参数，然后确定。此时要注意到右下角的小飞机是粉红色的，这时系统代理模式是直连模式，还不能翻墙成功，改成全局模式才行。至此就可以上外网了！</p><p><strong>要注意的一个问题，不用时记得改回直连模式，如果直接关机可能造成下次开机连百度都上不去，代理模式的问题，代理被改掉了，出现这种情况，我暂时只有求靠360断网急救箱的解决方案了</strong></p><h2 id="加速VPS服务器"><a href="#加速VPS服务器" class="headerlink" title="加速VPS服务器"></a>加速VPS服务器</h2><p>依旧在服务器环境下，输入以下命令进行BBR加速，一次即可。<br>wget –no-check-certificate <a href="https://github.com/teddysun/across/raw/master/bbr.sh" target="_blank" rel="noopener">https://github.com/teddysun/across/raw/master/bbr.sh</a></p><p>chmod +x bbr.sh</p><p>./bbr.sh</p><h2 id="Ubuntu系统安装ssr客户端"><a href="#Ubuntu系统安装ssr客户端" class="headerlink" title="Ubuntu系统安装ssr客户端"></a>Ubuntu系统安装ssr客户端</h2><p>已经有了可科学上网的服务器后，想在ubuntu上用，但没有图形化的客户端。</p><p>1.下载自动化安装脚本</p><blockquote><p>wget <a href="http://www.texfox.com/ssr" target="_blank" rel="noopener">http://www.texfox.com/ssr</a></p></blockquote><p>（若提示缺少git或wget请 sudo apt-get install xx）</p><p>2.给予ssr可执行权限</p><blockquote><p>sudo chmod 766 ssr</p></blockquote><p>3.安装ssr</p><blockquote><p>ssr install</p></blockquote><p>4.配置ssr</p><blockquote><p>ssr config</p></blockquote><p>接下里用gedit编辑服务器参数</p><p>i键更改，del键删除</p><p>更改完成后按ESC退出更改模式，再按:wq保存退出</p><p>sudo ssr start可启动ssr服务，不过config后也会启动服务。</p><hr><p>此时，上外网发现仍不能连接成功。据说是代理的问题，要用socks5协议的代理。</p><h3 id="下载与安装SwitchyOmega"><a href="#下载与安装SwitchyOmega" class="headerlink" title="下载与安装SwitchyOmega"></a>下载与安装SwitchyOmega</h3><p>这个插件可以在github上下载。<a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="noopener">下载地址</a></p><p><img src="https://github.com/AthleticsNero/AthleticsNero.github.io/blob/master/2019/07/23/ssr/5.png?raw=true" alt=""></p><p>我下载了这个版本的crx插件。下载完后按理说丢进chrome扩展程序就行了。</p><p>然而报错说不能使用这个crx，我就把crx做成压缩文件，再解压出来，变成了一个文件夹，丢进去就行了。</p><h3 id="配置SwitchyOmega"><a href="#配置SwitchyOmega" class="headerlink" title="配置SwitchyOmega"></a>配置SwitchyOmega</h3><p>点击插件进入配置页面</p><p><img src="https://github.com/AthleticsNero/AthleticsNero.github.io/blob/master/2019/07/23/ssr/6.png?raw=true" alt=""></p><p>点击新建情景模式，模式名称随便，但后面得用上</p><p>模式的配置如下</p><p><img src="https://github.com/AthleticsNero/AthleticsNero.github.io/blob/master/2019/07/23/ssr/7.png?raw=true" alt=""></p><h3 id="设置Auto-Switch"><a href="#设置Auto-Switch" class="headerlink" title="设置Auto Switch"></a>设置Auto Switch</h3><p>点击左侧的auto switch进入自动切换的配置界面，在切换规则那里点击编写源代码，源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[SwitchyOmega Conditions]</span><br><span class="line">@with result</span><br><span class="line">raw.githubusercontent.com +xxx    //xxx是你在第一步新建模式的名字</span><br><span class="line">* +direct</span><br></pre></td></tr></table></figure></p><p>源代码编辑完后，再点下这个编辑源代码，进入规则配置界面。情景模式都选用第一步我们配置的情景模式，再设置规则列表设置，选AutoProxy，规则列表网址填入 <a href="https://raw.githubusercontent.com/xxx/xxx/master/xxx.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/xxx/xxx/master/xxx.txt</a><br>(下图未填入，xxx自行替换)，最后点击下面的立即更新情景模式。<br><img src="https://github.com/AthleticsNero/AthleticsNero.github.io/blob/master/2019/07/23/ssr/8.png?raw=true" alt=""></p><p>最后一步配置完后，点击浏览器右上角该插件小图标，选择auto switch即可科学上网。<br><img src="https://github.com/AthleticsNero/AthleticsNero.github.io/blob/master/2019/07/23/ssr/9.png?raw=true" alt=""></p><p><strong>进入外网，但发现加载很慢时，注意小图标上有数字，点击将他们全部加入规则即可</strong></p><hr><p>当时我要连入外网的目的就在于同步书签，需要登陆谷歌账号，但是告诉我无法同步，request canceled。事实上问题出在谷歌同步页面没有添加规则，这个时候需要自己手动添加。</p><p>还是小图标，添加条件，*.googleapis.com +xxx就ok了！</p><h2 id="ubuntu设置开机自启动ssr服务"><a href="#ubuntu设置开机自启动ssr服务" class="headerlink" title="ubuntu设置开机自启动ssr服务"></a>ubuntu设置开机自启动ssr服务</h2><p>首先得有vim编辑器，没有的话apt-get下载一个</p><blockquote><p>sudo vim /etc/rc.local</p></blockquote><p>进入编辑文本，复制如下文本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh -e</span><br><span class="line">#</span><br><span class="line"># rc.local</span><br><span class="line">#</span><br><span class="line"># This script is executed at the end of each multiuser runlevel.</span><br><span class="line"># Make sure that the script will &quot;exit 0&quot; on success or any other</span><br><span class="line"># value on error.</span><br><span class="line">#</span><br><span class="line"># In order to enable or disable this script just change the execution</span><br><span class="line"># bits.</span><br><span class="line">#</span><br><span class="line"># By default this script does nothing.</span><br><span class="line"></span><br><span class="line">sudo ssr start</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure></p><p>系统会默认启动，直接实测开机会自动运行</p>]]></content>
      
      
      <categories>
          
          <category> solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShadowSocksR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueNote2</title>
      <link href="/2019/06/03/VueNote2/"/>
      <url>/2019/06/03/VueNote2/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue实例——购物车"><a href="#Vue实例——购物车" class="headerlink" title="Vue实例——购物车"></a>Vue实例——购物车</h1><p>之前照书上题目打得一个例子，模拟一个购物车，要求选中商品再计算总价。</p><p>1.对于每个条目，给其list对象中加入一条chose：false 表示其初始状态是非选中的，然后再html中该条目的checkbox中用v-model绑定该条目的chose值。当其checkbox选中后会将chose值变为真。首先实现了一个数据绑定。</p><a id="more"></a><p>然后再totalprice总价的计算方法里，增加一个判定条件，就是chose==true才计算入内。</p><p>2.提供一个全选的按钮。依然选用一个checkbox作为全选的按钮。初始状态为不选，不选作为vue实例的一个属性，取名为all，赋值false，在全选按钮上用v-model来绑定。要求单击后实现全选，用一个checkAll函数，在实例的methods里，根据all的取值真假来判定，对于每个条目，都给chose赋相应的值，如果all为真，证明已经全选，再按一次按常理就是全部不选，那就全部赋值为false，如果为假就全部赋为true。</p><p>下面附上全部代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>购物车示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"list.length"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"all"</span> @<span class="attr">click</span>=<span class="string">"checkAll"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>购买数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in list"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; index+1 &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"item.chose"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">                                @<span class="attr">click</span>=<span class="string">"handleReduce(index)"</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">:disabled</span>=<span class="string">"item.count === 1"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                &#123;&#123; item.count &#125;&#125;</span><br><span class="line">                                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleAdd(index)"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleRemove(index)"</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>总价：￥&#123;&#123; totalPrice &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>购物车为空<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span>&#123;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span><br><span class="line"><span class="attribute">border-collapse</span>: collapse;</span><br><span class="line"><span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">empty-cells</span>: show;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">th</span>,<span class="selector-tag">td</span>&#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span><br><span class="line"><span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">th</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#5c6b77</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        all: <span class="literal">false</span>,</span><br><span class="line">        list:[</span><br><span class="line">            &#123;</span><br><span class="line">                id: <span class="number">1</span>,</span><br><span class="line">                name: <span class="string">'iphone7'</span>,</span><br><span class="line">                price: <span class="number">2800</span>,</span><br><span class="line">                count: <span class="number">1</span>,</span><br><span class="line">                chose: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                id: <span class="number">2</span>,</span><br><span class="line">                name: <span class="string">'ipad pro'</span>,</span><br><span class="line">                price: <span class="number">4396</span>,</span><br><span class="line">                count: <span class="number">1</span>,</span><br><span class="line">                chose: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                id: <span class="number">3</span>,</span><br><span class="line">                name: <span class="string">'macbook'</span>,</span><br><span class="line">                price: <span class="number">4399</span>,</span><br><span class="line">                count: <span class="number">1</span>,</span><br><span class="line">                chose: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        totalPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.list.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.list[i].chose === <span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> item = <span class="keyword">this</span>.list[i];</span><br><span class="line">                    total += item.price * item.count;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> total.toString().replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+$)/g</span>,<span class="string">','</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        handleReduce:<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.list[index].count === <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">this</span>.list[index].count--;</span><br><span class="line">        &#125;,</span><br><span class="line">        handleAdd:<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.list[index].count++;</span><br><span class="line">        &#125;,</span><br><span class="line">        handleRemove:<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.list.splice(index,<span class="number">1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        checkAll:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.all === <span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.list.length; i++)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.list[i].chose = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.list.length; i++)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.list[i].chose = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueNote1</title>
      <link href="/2019/05/27/vuenote/"/>
      <url>/2019/05/27/vuenote/</url>
      
        <content type="html"><![CDATA[<h1 id="VueNote"><a href="#VueNote" class="headerlink" title="VueNote"></a>VueNote</h1><p>每个vue应用都需要实例化vue</p><p>对于html中id为app的元素，对其实例化。<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        site: <span class="string">'aaa'</span>,</span><br><span class="line">        num: <span class="number">23</span></span><br><span class="line">    &#125;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.site + <span class="string">'bbb'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>el参数就是选中的标签的id值，只对其作用。</p><p>data定义的是其属性，methods就是方法函数了。</p><p>在html标签中使用[object Object]这样由两层大括号包裹起来的数据将被vm实例内容替换。</p><p>vue实例内容与html内容绑定，可以互相找到也可以互相改变。</p><p>对于vue自带的属性和方法，可以加个前缀$，以区分开和用户自己定义的属性。</p><h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><p>v-html：用于输出html标签<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="xml">    message: '<span class="tag">&lt;<span class="name">p</span>&gt;</span>text<span class="tag">&lt;/<span class="name">p</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>v-if：根据if后面跟的属性的布尔值来判定是否产生效果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app-3"</span>&gt;</span><br><span class="line">  &lt;p v-<span class="keyword">if</span>=<span class="string">"seen"</span>&gt;现在你看到我了&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app-3'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    seen: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>还有v-else、v-else-if这两个就和其他语言一样的意思，只不过每次使用都得在一个div块里。</p><p>v-on：可以用于添加一个事件监听器，可以加入一个函数，触发事件时调用函数，也可以加入一个内联语句。(v-on:可以缩写为@)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app-5"</span>&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button v-on:click="reverseMessage"&gt;逆转消息&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var app5 = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">  el: '#app-5',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    message: 'Hello Vue.js!'</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    reverseMessage: function () &#123;</span></span><br><span class="line"><span class="regexp">      this.message = this.message.split('').reverse().join('')</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></p><p>该例子监听了一个点击效果，实现对message的逆转</p><p>v-model：用来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app-6"</span>&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;input v-model="message"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="keyword">var</span> app6 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app-6'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello Vue!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>v-bind：动态更新html元素上的属性。比如id，class，href。(v-bind:可以缩写为:)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;a v-bind:href=<span class="string">"url"</span>&gt;链接&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    url:<span class="string">"http://google.com"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>:class与普通的class可以并存，一般可以通过:class绑定一个布尔值，当其为真时使该类生效。当:class的表达式过长或逻辑复杂时还可以绑定一个计算属性。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"classes"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">  el: '#app',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    isActive: true,</span></span><br><span class="line"><span class="regexp">    error: null</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">  computed:&#123;</span></span><br><span class="line"><span class="regexp">    classes: function()&#123;</span></span><br><span class="line"><span class="regexp">      return &#123;</span></span><br><span class="line"><span class="regexp">        active: this.isActive &amp;&amp; !this.error,</span></span><br><span class="line"><span class="regexp">        'text-fail':this.error &amp;&amp; this.error.type === 'fail'</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></p><p><strong>vue在渲染元素时，出于效率考虑，会尽可能复用已有的元素而非重新渲染。加入一个唯一的key值就能使他重新渲染</strong></p><p>v-show: 用法与v-if类似，后面跟一个表达式，判定值是否为真而决定元素是否隐藏。值为真显示，为假隐藏。v-show只是简单的css属性切换，无论条件是否为真，都会进行编译，无非就是display属性改变了值而已。而v-if才是真正的条件渲染。</p><p>v-for：列表渲染指令。该指令可以绑定数组的数据来渲染一个项目列表。须以site in sites这样的形式，sites为源数据数组名并且site是数组元素迭代的别名。本质上是一个循环。</p><p>对于内容是一个对象的，也可以加入其他参数，键、值、序号皆可,对象的属性也可以被循环遍历。也可以迭代整数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app-4"</span>&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;li v-<span class="keyword">for</span>=<span class="string">"todo in todos"</span>&gt;</span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>ol&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var app4 = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">  el: '#app-4',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    todos: [</span></span><br><span class="line"><span class="regexp">      &#123; text: '学习 JavaScript' &#125;,</span></span><br><span class="line"><span class="regexp">      &#123; text: '学习 Vue' &#125;,</span></span><br><span class="line"><span class="regexp">      &#123; text: '学习 Android' &#125;</span></span><br><span class="line"><span class="regexp">    ]</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></p><p>与v-if一样，v-for也可以用在内置标签template上，将多个元素进行渲染。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;template v-<span class="keyword">for</span>=<span class="string">"book in books"</span>&gt;</span><br><span class="line">      &lt;li&gt;书名：&#123;&#123;book.name&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;作者：&#123;&#123;book.author&#125;&#125;&lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">  el: '#app',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    books: [</span></span><br><span class="line"><span class="regexp">      &#123;</span></span><br><span class="line"><span class="regexp">        name:'《月亮与六便士》',</span></span><br><span class="line"><span class="regexp">        author: '毛姆'</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      &#123;</span></span><br><span class="line"><span class="regexp">        name:'《一个人的村庄》',</span></span><br><span class="line"><span class="regexp">        author:'刘亮程'</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      &#123;</span></span><br><span class="line"><span class="regexp">        name:'《陶庵梦忆》',</span></span><br><span class="line"><span class="regexp">        author:'张岱'</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    ]</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></p><h2 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h2><p>要在父实例中使用这个组件，必须要在实例创建前注册，之后就可以用<code>&lt;my-component&gt;&lt;/my-component&gt;</code>的形式来使用组件了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'my-component'</span>,&#123;</span></span><br><span class="line"><span class="xml">      template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是组件的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>template的DOM结构必须被一个元素包含，如果直接写成‘这里是组件的内容’，不带<code>&lt;div&gt;&lt;/div&gt;</code>是无法渲染的</strong></p><p><strong>Vue组件的模板在某些情况下会受到HTML的限制，比如<code>&lt;table&gt;</code>内规定只能是<code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code>、<code>&lt;th&gt;</code>等表格元素，所以在table标签内直接使用组件是无效的。这种情况下，可以使用<code>&lt;tbody</code> is=”my-component”&gt;<code>&lt;/tbody&gt;</code>来使用组件。同理，还有限制元素如<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;select&gt;</code></strong></p><p>组件可以使用其单独定义的data，methods，computed，但data里要求必须是函数，将数据return。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>,&#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line">  data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">'组件内容'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="使用props传递数据"><a href="#使用props传递数据" class="headerlink" title="使用props传递数据"></a>使用props传递数据</h3><p>使用props来声明需要从父级接收的数据，props的值可以是两种，一种是字符串数组，一种是对象。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">message</span>=<span class="string">"来自父组件"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component'</span>,&#123;</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="xml">    template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>props中声明的数据与组件data函数return的数据主要区别在于props的来自父级，data中的是组件自己的数据，作用域是组件本身。</p><p><strong>由于HTML特性不区分大小写，当使用DOM模板时，驼峰命名的props名称转为短横分割命名。比如props中’warningText’，到html中组件属性里就是warning-text</strong></p><p>要写动态数据，则需要v-bind来绑定数据了。一个区别在于：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">message</span>=<span class="string">"[1,2,3]"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:message</span>=<span class="string">"[1,2,3]"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component'</span>,&#123;</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="xml">    template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message.length &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个例子第一个输出7，第二个输出3。第一个是被写死了，只传递字符串，长度就是“”中字符个数，第二种使用v-bind才能传递数组（布尔值、数字、对象）</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="/2019/05/26/Jsnote/"/>
      <url>/2019/05/26/Jsnote/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><p>1.在标签中填写 onclick 事件调用函数时，不是 onclick=函数名， 而是 onclick=”函数名+()”</p><p>2.script中用到的函数中带document.write会覆盖之前的文本。</p><p>3.js输出数据：<br><a id="more"></a></p><ul><li>使用 window.alert() 弹出警告框</li><li>使用 document.write() 方法将内容写到 HTML 文档中</li><li>使用 innerHTML 写入到 HTML 元素</li><li>使用 console.log() 写入到浏览器的控制台</li></ul><p>使用javascript操作html元素，使用document.getElementById(id) 方法，id要自己在元素内标记。</p><p>4.js对象用花括号包裹，采用键值对的方式来定义对象的属性，访问属性可以用对象名.属性，也可以对象名[“属性名”]这样。</p><p>在声明变量时，不必要一开始就设初值，可以后面追加，那么定义时可以var st = new Object(),然后再分别st.name=”abc”来对属性赋值。但用了new定义的就是对象。</p><p>数组的声明，可以var arr = new Array(“a”,”b”)也可以var arr = [“a”,”b”]</p><p>5.使用typeof无法区分数组和对象，返回的都是object。可以采用Array.isArray(数组名)这一方法来判断，也可以 数组名 instanceof Array来判断。</p><p>6.基本类型的变量存放在栈内存中。即赋初值时可以借用其他变量，但并不会随着其他变量的变化而变化。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//3</span></span><br><span class="line">a = <span class="string">"a"</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//"a"</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//3</span></span><br></pre></td></tr></table></figure></p><p>7.如果把值赋给尚未声明的变量，该变量将被自动作为 window 的一个属性,默认为全局变量。</p><p>8.let声明的变量，与var作用域不同，只作用于自己所在的代码块{}中，如果包含在if中，那么出了if块，这个let将无效。</p><p>用var声明变量，加入函数内和函数外声明的变量同名，是会改变函数外这个变量的值的。这种情况下要么用let限制范围，要么干脆改个变量名。</p><p>在相同作用域下，不允许先var a =1，然后let a=2，倒过来也一样。但是同种声明来改值的话是可以的。</p><p>9.单引号和双引号均能定义字符串，并且字符串中能包含另一种引号，如要包含与首尾相同的引号，就得用\’或者\”这样的转义字符了。并且字符串可以用s[7]这样的索引来访问单个字符。</p><p>10.js中的==和===的区别：</p><p>==：用于比较二者值是否相等，如类型不同，将高等类型转化为初等类型，”1”==1是true的。</p><p>===：要求类型与值皆相等，若类型不同，直接判false</p><p>11.+号用于拼接字符串，同时字符串也能与数字拼接。自左向右的顺序，如果先碰到字符串，那么接下来的数字都将作为字符串拼接，若显示数字间的+，会作和再与字符串拼接。</p><p>12.js中可以对一个代码块打标签，label：{statement}，然后使用break label或者continue label可以针对该标签来跳出或者继续。这样扩大了break和continue的使用范围。</p><p>13.null和undefined：</p><p>null用于对象，undefined用于变量，属性，方法。</p><p>undefind代表声明了但为赋值。null是没有值，一般用于主动释放内存，即不再使用一个变量时，将其赋值为null。</p><p>undefined和null值相等，但类型不同。</p><p>14.将其他类型转化为字符串，可以用String(2)或者2.toString()。</p><p>将字符串转化为数字，如果是空字符串，返回的是0，如果字符串不好直接转为数字，会变成NaN,这不是个数字，但他是number类型的。</p><p>15.一元运算符+可以用来将字符串转化为数字，比如y=”5”，x=+y，x就是5。如果y是”John”,就变成NaN了，但类型上还是数字。</p><p>16.try、catch、throw、finally这四个用作错误处理，try就是尝试操作，如果符合某种错误情况，用throw抛出自定义错误err，然后catch(err)中针对错误做处理，最后的finally是无论如何总要进行的操作。</p><p>17.变量提升，就是可以先给变量赋值并使用，而在最后再声明，这种操作是可行的，但不适用于初始化变量，只能var a，但不能var a = 7。在严格模式中，就不能使用为声明的变量。</p><p>let与var不同，不允许变量提升。</p><p>18.js中字符串断行要用到反斜杠\,switch语句在判断的时候是采用===恒等计算的，要求类型也一致。数组不允许用名字来索引，只能用数字下标索引，一旦数组用名字做索引，会认定是对象。</p><p>19.表单自动验证可以在input框属性中使用required=”required”要求必须填入内容。</p><p>20.void()仅仅是代表不返回任何值，但是括号内的表达式还是要运行。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FlutterNote3</title>
      <link href="/2019/05/19/FlutterNote3/"/>
      <url>/2019/05/19/FlutterNote3/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter导航"><a href="#Flutter导航" class="headerlink" title="Flutter导航"></a>Flutter导航</h1><h2 id="父子级导航页面的跳转"><a href="#父子级导航页面的跳转" class="headerlink" title="父子级导航页面的跳转"></a>父子级导航页面的跳转</h2><p>因为app中包含不止一个界面，void main()后面不能用箭头函数，需要设定首页。</p><p>对于每个页面，用class分别定义，页面作为home，return的是Scaffold类，当然也可以是其他。在按钮上添加跳转到另一个页面的功能。<br><a id="more"></a></p><p>另一个页面作为子页面，返回只要用到一个按钮的pop即可，不过左上角也有箭头返回。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    title:<span class="string">"nav"</span>,</span><br><span class="line">    home:FirstScreen()</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold( <span class="comment">//FirstScreen作为home中的页面，其类型是Scaffold</span></span><br><span class="line">                      <span class="comment">// 于是直接return一个</span></span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'导航页面'</span>),),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: RaisedButton(</span><br><span class="line">          child: Text(<span class="string">'点击查看'</span>),</span><br><span class="line">          onPressed: ()&#123;</span><br><span class="line">            Navigator.push(context, MaterialPageRoute(</span><br><span class="line">                builder:(context)=&gt;SecondScreen()</span><br><span class="line">            ));</span><br><span class="line">          &#125;</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">'srj'</span>),),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: RaisedButton(</span><br><span class="line">            child: Text(<span class="string">'返回'</span>),</span><br><span class="line">            onPressed:()&#123;</span><br><span class="line">              Navigator.pop(context);</span><br><span class="line">            &#125;</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是一个基本的父子级界面的跳转。</p><p>## </p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FlutterNote2</title>
      <link href="/2019/05/13/FlutterNote2/"/>
      <url>/2019/05/13/FlutterNote2/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter布局"><a href="#Flutter布局" class="headerlink" title="Flutter布局"></a>Flutter布局</h1><h2 id="水平布局"><a href="#水平布局" class="headerlink" title="水平布局"></a>水平布局</h2><p>body:Row()中间内容比如说要放上按钮，直接new一个RaisedButton，它的宽高是固定的，如果在它外面套上一个Expanded(),子元素再放按钮，就能达到自适应长度的效果，不至于边上漏出一块白的那么丑。</p><a id="more"></a><p>注意expanded与不加expanded的混合使用。</p><h2 id="垂直布局"><a href="#垂直布局" class="headerlink" title="垂直布局"></a>垂直布局</h2><p>body:Column()放入内容与水平同理，值得注意的是：<strong>垂直布局中mainAxisAlign即主轴对齐方式，主轴指的是垂直方向，而crossAxisAlign副轴代表水平，水平布局同理。</strong></p><h2 id="层叠布局"><a href="#层叠布局" class="headerlink" title="层叠布局"></a>层叠布局</h2><p>想在一个东西上放上另一个东西，比如一个图片上放上一个文本，要用到层叠布局。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">void</span> main()=&gt;runApp(Myapp());</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myapp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">var</span> stack = Stack(                            <span class="comment">//定义一个stack</span></span><br><span class="line">      alignment: <span class="keyword">const</span> FractionalOffset(<span class="number">0.5</span>, <span class="number">1.0</span>),<span class="comment">//子元素对齐方式，取值0-1。</span></span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        <span class="keyword">new</span> CircleAvatar(                         <span class="comment">//这里用到一张圆形图片</span></span><br><span class="line">          backgroundImage: NetworkImage(url),</span><br><span class="line">          radius: <span class="number">100.0</span>,                          <span class="comment">//圆角</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> Container(</span><br><span class="line">          decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">            color: Colors.lightBlue,        </span><br><span class="line">          ),</span><br><span class="line">          padding: EdgeInsets.all(<span class="number">5.0</span>),</span><br><span class="line">          child: Text(<span class="string">'....'</span>),              </span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> Positioned(</span><br><span class="line">            top:<span class="number">10.0</span>,</span><br><span class="line">            left:<span class="number">50.0</span>,</span><br><span class="line">            child:Text(<span class="string">'...'</span>),</span><br><span class="line">        )                                        <span class="comment">//定位控件</span></span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Row Widget'</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: Text(<span class="string">'垂直方向布局'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body:Center(</span><br><span class="line">            child: stack,                           <span class="comment">//变量调用</span></span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是在一个圆形图片上放两个文本的基本层叠示例。也用到了positioned定位一个文本，两种方法。</p><h2 id="卡片布局"><a href="#卡片布局" class="headerlink" title="卡片布局"></a>卡片布局</h2><p>类似于通讯簿一样的布局（使用垂直布局时），前面的icon图标，配上主副标题。</p><p>在子类listTile中，title作主标题，然后subtitle作副标题在它下面，leading作这一条前面的内容，可以是图标。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ListTile(</span><br><span class="line">            title: Text(</span><br><span class="line">                <span class="string">'XXXX'</span>,</span><br><span class="line">              style: TextStyle(fontWeight:FontWeight.w500),</span><br><span class="line">            ),</span><br><span class="line">            subtitle: Text(<span class="string">'8888'</span>),</span><br><span class="line">            leading: <span class="keyword">new</span> Icon(Icons.account_box,color: Colors.lightBlue),</span><br><span class="line">          ),</span><br></pre></td></tr></table></figure></p><p>另外卡片布局两条卡片之间可以new一个Divider()作为分割线。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FlutterNote1</title>
      <link href="/2019/05/03/FlutterNote1/"/>
      <url>/2019/05/03/FlutterNote1/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter基本结构"><a href="#Flutter基本结构" class="headerlink" title="Flutter基本结构"></a>Flutter基本结构</h1><p>以一个helloworld程序展示一个flutter应用的基本结构。</p><a id="more"></a><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(Myapp());</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myapp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Widget build(BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> MaterialApp(</span><br><span class="line">            title: <span class="string">'Hello World'</span>,</span><br><span class="line">            home: Scaffold(</span><br><span class="line">                appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">                title: Text(<span class="string">'Hello World'</span>),</span><br><span class="line">                ),</span><br><span class="line">            body: Center(</span><br><span class="line">                child: Text(<span class="string">'Hello Flutter!'</span>,style: TextStyle(fontSize: <span class="number">25.0</span>),),</span><br><span class="line">                )</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Flutter-常用控件"><a href="#Flutter-常用控件" class="headerlink" title="Flutter 常用控件"></a>Flutter 常用控件</h1><h2 id="1-Text控件"><a href="#1-Text控件" class="headerlink" title="1.Text控件"></a>1.Text控件</h2><p>textAlign：TextAlign.center 控制文本居中显示，当然还有left、right、start、end等属性值</p><p>maxLines：该文本最多显示成几行，填数字即可。溢出部分不显示。</p><p>overflow：文本溢出处理，属性值TetxOverflow.(clip)(fade)(ellipsis),分别是切除，渐变，省略</p><p><strong>style</strong>：TextStyle()内包含其他属性。fontsize：25.0(要用浮点数)。color:Color.fromARGB(a,r,g,b)。</p><p>decoration:TextDecoration.underline代表文本加下划线。</p><p>decorationstyle：TextDecorationStyle.solid代表装饰是实线。</p><h2 id="2-Container控件"><a href="#2-Container控件" class="headerlink" title="2.Container控件"></a>2.Container控件</h2><p>相当于html里的div，就是一个块儿。</p><p>alignment:Alignment.center–对齐格式，点后面也可以带两个单词，比如bottomleft，即底部靠左，也可以用坐标(x,y)表示。</p><p>对于一个div，肯定有width、height、color等属性，其属性值是浮点数，得带小数点。</p><p>padding和margin： EdgeInsets.all(10.0)代表上下左右四个方向都有10.0的padding或者margin。当然用方法.fromLTRB带四个参数更随心所欲。</p><p>decoration: new BoxDecoration(),内部加其他属性。比如gradient(渐变色): LinearGradient(colors:[Colors.blue,colors.green])。注意渐变色与color冲突。</p><p>还能加border:Border.all(width:5.0,color:Colors.red),代表四个方向的边框线。</p><h2 id="3-Image控件"><a href="#3-Image控件" class="headerlink" title="3.Image控件"></a>3.Image控件</h2><p>new一个Image控件，有四种类型，分别是asset（本地资源）、file（本地图片）、memory、network（网络图片）。</p><p>加入图片后还可以用fit:BoxFit选择填充方法。</p><table><thead><tr><th style="text-align:center">属性名称</th><th style="text-align:center">样式</th></tr></thead><tbody><tr><td style="text-align:center">BoxFit.contain</td><td style="text-align:center">全图居中显示但不充满，显示原比例</td></tr><tr><td style="text-align:center">BoxFit.fill</td><td style="text-align:center">全图显示且填充满，图片可能会拉伸</td></tr><tr><td style="text-align:center">BoxFit.cover</td><td style="text-align:center">图片可能拉伸，也可能裁剪，但是充满容器</td></tr><tr><td style="text-align:center">BoxFit.fitHeight</td><td style="text-align:center">图片可能拉伸，可能裁剪，高度充满</td></tr><tr><td style="text-align:center">BoxFit.fitWidth</td><td style="text-align:center">图片可能拉伸，可能裁剪，宽度充满</td></tr><tr><td style="text-align:center">BoxFit.scaleDown</td><td style="text-align:center">效果和contain差不多， 但是只能缩小图片，不能放大图片</td></tr></tbody></table><p>也可以再加入颜色，并用colorBlendMode:BlendMode.XXX来混色。</p><p>repeat：ImageRepeat设置图片重复填充的方式。</p><h2 id="4-ListView控件"><a href="#4-ListView控件" class="headerlink" title="4.ListView控件"></a>4.ListView控件</h2><p>new一个ListView列表控件<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">body:<span class="keyword">new</span> ListView(</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">        <span class="keyword">new</span> ListTile(</span><br><span class="line">            leading:<span class="keyword">new</span> Icon(Icons.XXX),</span><br><span class="line">            title:<span class="keyword">new</span> Text(<span class="string">'XXX'</span>)</span><br><span class="line">        )</span><br><span class="line">        ......</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>作为列表项的组件也可以不是icon，而是图片，就要用到image了。</p><h3 id="横向列表："><a href="#横向列表：" class="headerlink" title="横向列表："></a>横向列表：</h3><p>在listview中scrollDirection: Axis.horizontal，代表横向列表。然后每个列表部件只设置宽度，可以左右拉动。如果是纵向列表，那就是Axis.vertical，每个部件设置高度，可以下拉。</p><h3 id="动态列表："><a href="#动态列表：" class="headerlink" title="动态列表："></a>动态列表：</h3><p>在runApp()中声明列表项，如 items:List(),中间加数字可以固定列表长度。items:List<code>&lt;string&gt;</code>()确定了项的类型，items:[1,2,3]直接赋值。</p><p>还有items:List<code>&lt;string&gt;</code>.generate(1000,(i)=&gt;”Items &amp;i”)用generate函数，相当于数组，i则是下标。引号内容是每一项的格式，&amp;号作替换符。</p><p>举个例子：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(Myapp(</span><br><span class="line">  items:<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;.generate(<span class="number">1000</span>, (i)=&gt;<span class="string">"第<span class="subst">$i</span>项："</span>)</span><br><span class="line">));</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myapp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; items;</span><br><span class="line"><span class="comment">//  接收items参数</span></span><br><span class="line">  Myapp(&#123;Key key,<span class="meta">@required</span> <span class="keyword">this</span>.items&#125;):<span class="keyword">super</span>(key:key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Hello World'</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: Text(<span class="string">'动态列表'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="keyword">new</span> ListView.builder(</span><br><span class="line">          itemCount: items.length,<span class="comment">//得到传递过来的参数的长度</span></span><br><span class="line">          itemBuilder: (context,index)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ListTile(</span><br><span class="line">              title: Text(<span class="string">'<span class="subst">$&#123;items[index]&#125;</span>'</span>),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="网格列表"><a href="#网格列表" class="headerlink" title="网格列表"></a>网格列表</h3><p>以文本表示的网格列表，换成Image控件可以显示图片。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">body: GridView.count(</span><br><span class="line">    padding:EdgeInsets.all(<span class="number">30.0</span>),</span><br><span class="line">    crossAxisSpacing:<span class="number">20.0</span>,<span class="comment">//网格之间的间距</span></span><br><span class="line">    crossAxisCount:<span class="number">3</span> <span class="comment">//每行显示的列表项个数</span></span><br><span class="line">    children:&lt;Widget&gt;[</span><br><span class="line">        Text:<span class="string">"..."</span></span><br><span class="line">        Text:<span class="string">"..."</span></span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>另一种网格列表的写法:<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">body: GridView(</span><br><span class="line">    gridDelegate:SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">        crossAxisCount:<span class="number">3</span>,</span><br><span class="line">        mainAxisSpacing:<span class="number">2.0</span>,<span class="comment">//纵向列表项间距</span></span><br><span class="line">        CrossAxisSpacing:<span class="number">2.0</span>,<span class="comment">//横向列表项间距</span></span><br><span class="line">        childAspectRatio:<span class="number">1.0</span>,<span class="comment">//宽高比</span></span><br><span class="line">    )，</span><br><span class="line">    children：&lt;Widget&gt;[</span><br><span class="line">        <span class="keyword">new</span> Image.network(src),</span><br><span class="line">        ....</span><br><span class="line">        ....</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinRAR破解</title>
      <link href="/2019/02/21/winrar-pojie/"/>
      <url>/2019/02/21/winrar-pojie/</url>
      
        <content type="html"><![CDATA[<h3 id="WinRAR-64位软件的破解方法"><a href="#WinRAR-64位软件的破解方法" class="headerlink" title="WinRAR 64位软件的破解方法"></a>WinRAR 64位软件的破解方法</h3><p>1、新建一个文本文档</p><a id="more"></a><p>2、在文档里输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RAR registration data</span><br><span class="line">wncn</span><br><span class="line">Unlimited Company License</span><br><span class="line">UID=1b064ef8b57de3ae9b52</span><br><span class="line">64122122509b52e35fd885373b214a4a64cc2fc1284b77ed14fa20</span><br><span class="line">66ebfca6509f9813b32960fce6cb5ffde62890079861be57638717</span><br><span class="line">7131ced835ed65cc743d9777f2ea71a8e32c7e593cf66794343565</span><br><span class="line">b41bcf56929486b8bcdac33d50ecf7739960627351a9ef03353a0e</span><br><span class="line">592b327cd80645472f0ee622d1915028a9e05298e593db36384f0f</span><br><span class="line">f46afd5fed9b0bd095d1788266b81494b976f78fb1c551ca60a054</span><br><span class="line">b17ad853ab902058b42c6887e1b3d40e0b45abf37de02106056887</span><br></pre></td></tr></table></figure><p>3、把文本文档重命名为“rarreg.key”（引号里的内容）</p><p>4、把这个文件放到winRAR安装目录下即可</p><p>5、破解完成</p>]]></content>
      
      
      <categories>
          
          <category> solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Win10无法找到现有分区</title>
      <link href="/2019/02/17/win10error/"/>
      <url>/2019/02/17/win10error/</url>
      
        <content type="html"><![CDATA[<p>昨天给固态安装win10系统，本想用机械硬盘迁移系统到固态里去，但一直给我报错，“操作系统分区至少要预留800MB空间”。</p><p>这叫什么话?大把的空间呢，然后上网找也没找到解决方案。最后只要重新装了，反正盘里没东西。</p><p>但是给安装win10时又出错了，先是在u盘里点击win10的iso文件，却告知有磁盘未能识别，于是发现自己确实有一些系统盘莫名其妙连名字都没一个全删了。</p><p>然后安装时选择安装在哪个盘上时报错了：“我们无法创建新的分区，也找不到现有的分区”，明明两个分配好的分区都空空的摆在那却无法用？</p><p>我当时500GB的固态分了两个区，都会报错，于是我删除了一个区，另外一个区就可以装了，大概问题在于要留出未分配空间。这样问题就解决了，但还是奇怪百度经验里他们装系统怎么就不需要预留未分配空间？</p>]]></content>
      
      
      <categories>
          
          <category> solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>margin塌陷和合并</title>
      <link href="/2019/02/04/marginbug/"/>
      <url>/2019/02/04/marginbug/</url>
      
        <content type="html"><![CDATA[<h2 id="Margin塌陷"><a href="#Margin塌陷" class="headerlink" title="Margin塌陷"></a>Margin塌陷</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>在这两个父子级块级元素的css定义中，其垂直margin是取父子元素中的最大值，而不是相对父级块的margin。</p><p>要解决这个塌陷问题，要用到bfc（块级格式化上下文）改变父级的渲染规则。</p><h4 id="如何触发一个盒子的bfc"><a href="#如何触发一个盒子的bfc" class="headerlink" title="如何触发一个盒子的bfc"></a>如何触发一个盒子的bfc</h4><ol><li>position：absolute</li><li>display：inline-block</li><li>float：left/right</li><li>overflow：hidden（隐藏溢出部分）</li></ol><p>这些定义在父级块上都能解决margin塌陷的问题，但都不能完美解决，还得根据情况选择适合的方法。</p><p><strong>1、3两种方法内部都会自动将display改为inline-block</strong></p><h2 id="Margin合并"><a href="#Margin合并" class="headerlink" title="Margin合并"></a>Margin合并</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;demo1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;demo2&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在这两个兄弟级块级元素的css定义中，其垂直margin是会合并的，比如第一个下方margin200，第二个上方margin100，最终结果是只有200的margin，若要解决这个问题，只需把第一个的margin改成300就行了。</p>]]></content>
      
      
      <categories>
          
          <category> solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS笔记</title>
      <link href="/2019/01/25/cssnote/"/>
      <url>/2019/01/25/cssnote/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS笔记"><a href="#CSS笔记" class="headerlink" title="CSS笔记"></a>CSS笔记</h1><h2 id="一、如何创建CSS"><a href="#一、如何创建CSS" class="headerlink" title="一、如何创建CSS"></a>一、如何创建CSS</h2><ol><li>内联样式：也叫<strong>行间样式</strong>在标签后面写上style={…}就可以，但仅限于这个标签产生样式作用  </li><li>内部样式表：当单个文档需要特殊的样式时，就应该使用内部样式表。可以使用<code>&lt;style&gt;</code> 标签在文档头部定义内部样式表.  </li><li>外部样式表：在html的head标签内加上link标签，href的值就是css文件的路径，但是.css文件内不能包含任何html标签。<a id="more"></a></li></ol><h2 id="二、选择器"><a href="#二、选择器" class="headerlink" title="二、选择器"></a>二、选择器</h2><ol><li><p>id选择器：</p><p> 以<code>#id值{...}</code>的格式定义某具有该id的标签的样式。</p><p> 在用来建立派生选择器时，在id后面空格在写上特定标签的名，就可以仅修改其部分。</p></li><li><p>类选择器：</p><p> 以<code>.类名{...}</code>这样的格式定义属于该类型的标签的样式。</p><p> 如果一个标签运用css样式时要用两种类，则是clss=”1 2”,clss要保证只有一个。</p><p> 在用来建立派生选择器时，可以在后面空格加标签，代表该类下的一个标签使用该样式。也可以标签.类名，这样仅代表该标签下该类使用这个样式。</p></li><li><p>属性选择器:</p><p> 以<code>[属性名]</code>这样的格式定义含有该属性的所有标签的样式。</p><p> 当然也可以<code>[属性名=“属性值”]</code>这样可以更加具体，而且属性值也可以取多个。</p></li><li><p>标签选择器:</p><p> 以<code>标签名{...}</code>这样的格式定义的对所有该标签生效,当然加个空格再加个子标签那就成了派生选择器了。</p></li><li><p>通配符选择器：</p><p> 以<code>*{...}</code>这样定义的样式会应用到网页所有标签，甚至包括head、body这样的大标签。</p></li><li><p>派生选择器：</p><p> 又叫父子选择器，只要满足父子关系就可以用，而且并不一定要是直接父子级，间接亦可。每一层级不限定使用哪种表示形式。</p></li><li><p>直接子元素选择器：</p><p> 在两个标签之间加上<code>&gt;</code>符号，就限定了直接的父子关系。与派生区别。</p></li><li><p>分组选择器：</p><p> 用<code>，</code>分割开的各组共用同一样式。</p></li></ol><h2 id="三、样式采用的优先级"><a href="#三、样式采用的优先级" class="headerlink" title="三、样式采用的优先级"></a>三、样式采用的优先级</h2><p>当一个标签采用css的时候发生样式重叠的时候，就得根据优先级来判断生效的样式了。</p><p>！important &gt; 行间样式 &gt; id &gt; class = 属性 = 伪类 &gt; 标签 &gt; 通配符</p><p>其权重分别为（256进制）：Infinity 1000 100 10 1 0</p><p><strong>当其优先级相同的时候则根据先来后到，后者覆盖前者处理。</strong></p><p>当采用并列多项的选择器时，其优先级计算方法是各项权重值相加。另外无穷大加一比无穷大更大。</p><h2 id="四、标签类别"><a href="#四、标签类别" class="headerlink" title="四、标签类别"></a>四、标签类别</h2><h4 id="1、行级元素（内联元素）【inline】：内容决定元素所占位置，不可以通过css改变宽高"><a href="#1、行级元素（内联元素）【inline】：内容决定元素所占位置，不可以通过css改变宽高" class="headerlink" title="1、行级元素（内联元素）【inline】：内容决定元素所占位置，不可以通过css改变宽高"></a>1、行级元素（内联元素）【inline】：内容决定元素所占位置，不可以通过css改变宽高</h4><p>（span、em、strong、a、del）</p><h4 id="2、块级元素【block】：独占一行，可以通过css改变宽高"><a href="#2、块级元素【block】：独占一行，可以通过css改变宽高" class="headerlink" title="2、块级元素【block】：独占一行，可以通过css改变宽高"></a>2、块级元素【block】：独占一行，可以通过css改变宽高</h4><p>（div、p、li、ul、ol、form、address）</p><h4 id="3、行级块元素【inline-block】：内容决定位置，可以通过css改变宽高"><a href="#3、行级块元素【inline-block】：内容决定位置，可以通过css改变宽高" class="headerlink" title="3、行级块元素【inline-block】：内容决定位置，可以通过css改变宽高"></a>3、行级块元素【inline-block】：内容决定位置，可以通过css改变宽高</h4><p>（img）</p><h2 id="五、CSS常用属性"><a href="#五、CSS常用属性" class="headerlink" title="五、CSS常用属性"></a>五、CSS常用属性</h2><ol><li>font-size： 字体大小，默认16px。其实际改变的是字体的高  </li><li>font-weight： 字体粗细，默认是normal，可改变为lighter、normal、bold、bolder  </li><li>font-family： 字体样式，默认是arial。  </li><li>font-style： 当其值为italic时，文字斜体展示。  </li><li>color： 定义字体的颜色，一般用六位rgb十六进制的代码来表示，当每两位相同时可缩写到三位。另外还能用颜色函数，rgb(n1,n2,n3)，每一位取值范围是0-255，亦可0%-100%。    </li><li>border: 边框，它有三个参数，第一个设置边框的宽度，如1px；第二个是边框的style，如solid实线，dotted是点状虚线，dashed是条状虚线；第三个是边框的颜色。另外transparent是透明色。<br>另外这个属性每一个边都可以拆分开来，分别border-top，bottom，left，right可以再拆分设置参数  </li><li>backgroundcolor：背景颜色  </li><li>text-align：文本对齐方式，默认left，居中是center，右对齐就是right  </li><li>line-height：单行文本所占高度。如果其值等于容器高度，就能使文字垂直居中显示。  </li><li>text-indent：文本缩进，一般用em单位表示，1em=1*font-size，所以对于中文文本，两个字就是2em  </li><li>text-decoration：文本装饰，主要就两个值，underline下划线，line-through删除线  </li><li>cursor：鼠标指向对应元素时的样式，有需要再查就行了。  </li><li>display：该属性控制元素的类别，block代表块级，inline代表行级，根据他们的特点选择。  </li><li>border-radius：控制边角圆度，50%就成圆环了  </li><li>opacity： 透明度，取0-1之间的数。  </li><li>z-index： 默认是0，越大即越靠近人，用在层模型上。  </li><li>vertical-align: 控制内容在一行里的上下位置，middle是竖直方向上居中。</li></ol><h2 id="六、盒模型"><a href="#六、盒模型" class="headerlink" title="六、盒模型"></a>六、盒模型</h2><p>包括之间的border（边框），还有margin（外边距）、padding（内边距）、还有内容本身，构成一个盒模型，几乎所有标签都有这几个属性。</p><p>margin和padding都能有四个参数，分别是顺时针的上右下左的宽度。</p><p>如果只写一个值，代表四个参数都是一致的。如果是两个参数，那第一个代表上下，第二个代表左右。三个参数的话就是上、左右、下。</p><p>当然也可以用margin-left之类的去单独定义。</p><p>而在计算一个块的可视大小时，margin是不用算进去的。</p><p>★margin有一个特殊的可选参数，auto，比如margin：0 auto这样的效果是这块子级div，在你缩小窗口时，先缩短的是外部div而不是它。</p><p>★img图片堆叠时，会有间隙，不过这并非是margin，只要把两个img标签中间的空格去掉就ok了。</p><h2 id="七、定位"><a href="#七、定位" class="headerlink" title="七、定位"></a>七、定位</h2><p>position属性，可以用来给元素定位，一般以left：npx，top：npx这样的形式去定位，当然也可以从右边开始或者下面开始，但不常用。</p><h4 id="position的三个值"><a href="#position的三个值" class="headerlink" title="position的三个值"></a>position的三个值</h4><p>1、absolute：</p><pre><code>脱离原来位置进行定位。即定位后，就失去原本所占空间。  相对于最近的有定位的父级进行定位，如果没有，就相对于文档进行定位。</code></pre><p>2、relative：</p><pre><code>保留原来位置进行定位。定位后，原本所占空间依然存在。  相对自己原来位置进行定位。</code></pre><p>3、fixed：</p><pre><code>定位不管网页怎么移动，始终固定在屏幕上某一位置。</code></pre><h2 id="八、伪元素"><a href="#八、伪元素" class="headerlink" title="八、伪元素"></a>八、伪元素</h2><pre><code>主要使用的两个伪元素，.demo1::before/after，每一个标签在诞生的时候都有着两个伪元素，里面必须有content属性，可以是文字，也可以是空的，但必须有。</code></pre><h2 id="九、浮动模型"><a href="#九、浮动模型" class="headerlink" title="九、浮动模型"></a>九、浮动模型</h2><p>在子元素上定义float属性（float：left/right）能使浮动元素按左或者右的方向排列直到它的外边缘碰到包含框或另一个浮动框的边框为止。如果该行剩余量容不下一个元素，则会换行继续排列。</p><p>浮动模型一个常用的情形就是报纸那样的展示，文字包围图片的展示就是通过将图片标签增加float属性得到的。</p><h4 id="浮动流"><a href="#浮动流" class="headerlink" title="浮动流"></a>浮动流</h4><p>浮动元素产生了浮动流。</p><p>所有产生了浮动流的元素，<strong>块级元素会无视他们的空间</strong>，而产生了bfc的元素和文本类属性（inline）的元素（包括图片）以及文本都能看到他们。</p><p>若对于浮动元素，其父级是个块级元素，带有边框，却无视子级浮动元素包不住它，这是受了浮动流的影响，若要产生效果，则需清理浮动流。</p><p>在浮动元素下写一个没有内容的p标签，而其css属性，使用clear：both则可以清理附近的浮动流。这种方法多加了一个标签，影响了整个结构，虽然影响轻微，但最好避免。</p><p>最合适的方法是利用伪元素，在伪元素里使用clear就可以，不过要注意的是伪元素的类型是行级元素，而clear必须是块级的，所以还得用display改变其属性。</p><h2 id="十、文字溢出处理"><a href="#十、文字溢出处理" class="headerlink" title="十、文字溢出处理"></a>十、文字溢出处理</h2><p>溢出的文本，打点展示，多行文本一般手动打点，而单行文本有方法，加上三个属性即可。</p><p>white-space: nowrap;–文本不受容器影响，不自动分段<br>overflow: hidden;溢出的文本不可见<br>text-overflow: ellipsis;文本若有溢出，即打点  </p><h2 id="十一、背景图片处理"><a href="#十一、背景图片处理" class="headerlink" title="十一、背景图片处理"></a>十一、背景图片处理</h2><p>background-image：url() 括号内填上图片的url，背景就是该图片了。<br>background-size这个属性控制图片的尺寸，两个参数，宽高。<br>background-repeat其属性若是repeat，则会平铺铺满为止，还有repeat-x横向，y纵向，还有no-repeat不重复。<br>background-position控制图片在容器中的位置，两个参数分别代表x，y，可以用像素表示也可以left，top英文表示，还有center就是居中处理。  </p><h4 id="两种方法解决css和网速不兼容的问题"><a href="#两种方法解决css和网速不兼容的问题" class="headerlink" title="两种方法解决css和网速不兼容的问题"></a>两种方法解决css和网速不兼容的问题</h4><p>a标签附带链接，文本用于表示该内容，然后css中加上背景图片</p><p>当网速不足，浏览器便不会加载css文件，此时若要表示该区域的内容，则要文字，但如果网速足够，又要文字不出现，这个问题有两种方案。</p><p>1、利用首行缩进，text-indent：其参数就是容器的宽度，再补上while-space和overflow用于隐藏文本。<br>2、利用padding将内容撑开。把容器的高度改为0，然后其内容利用padding-top撑开，再利用overflow将文本不可见。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫笔记</title>
      <link href="/2019/01/18/pythonnote2/"/>
      <url>/2019/01/18/pythonnote2/</url>
      
        <content type="html"><![CDATA[<h2 id="python爬虫笔记"><a href="#python爬虫笔记" class="headerlink" title="python爬虫笔记"></a>python爬虫笔记</h2><p>爬虫分为四个步骤，首先获取数据，然后解析数据，再提取数据，最后是存储数据</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/AthleticsNero/AthleticsNero.github.io/master/2019/01/18/pythonnote2/pic1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="comment">#首先引入requests库</span></span><br><span class="line">res=requests.get(<span class="string">'URL'</span>)<span class="comment">#向服务器发送了一个请求,把服务器响应结果赋给res，为response对象</span></span><br><span class="line">res.encoding=<span class="string">'gbk'</span> <span class="comment">#定义response对象的编码，一般会自己判断不必写，如果错误则补上正确的码表</span></span><br><span class="line">pic=res.content <span class="comment">#获取二进制数据</span></span><br><span class="line">note=res.text <span class="comment">#获取字符串数据</span></span><br><span class="line">print(res.status_code)检查是否请求成功，成功则为<span class="number">200</span></span><br><span class="line">k=open(<span class="string">'note.txt'</span>,<span class="string">'a+'</span>) <span class="comment">#将res.text内容写在note.txt文件末尾</span></span><br><span class="line">m=open(<span class="string">'pic.jpg'</span>或<span class="string">'music.mp3'</span>,<span class="string">'wb'</span>) <span class="comment">#以二进制形式生成图片或音频</span></span><br><span class="line">k.write(pic\note)</span><br><span class="line">k.close() <span class="comment">#基本文件读写操作</span></span><br></pre></td></tr></table></figure><p>以上是一般的获取数据的方法，接下来是用BeautifulSoup解析数据，从源码入手爬取数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="comment">#引入bs库</span></span><br><span class="line">res=requests.get(<span class="string">'URL'</span>)</span><br><span class="line">soup=BeautifulSoup(<span class="string">'字符串数据,可以是res.text'</span>，<span class="string">'html.parser'</span>) <span class="comment">#解析数据，html.parser是解析器</span></span><br></pre></td></tr></table></figure><p>beautifulsoup提取数据的两个方法：</p><p>find()和find_all(),find()找到满足条件的首个数据，参数可以是标签和属性，find_all则是所有符合的数据，生成的自然是一个列表</p><p><strong>属性如果是class，则要在class后面加个_防止被编译器识别为关键字。</strong></p><p>Tag对象，提取出的单个数据的类是Tag，其主要用法有三种：</p><ol><li>tag.find()用来提取tag中的tag，由父级标签提取子级标签</li><li>tag.text提取tag中的文字，可以忽略标签信息</li><li>tag[‘属性名’]提取tag中这个属性的值，不过只能仅限这个tag的标签，不包含内部标签</li></ol>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础知识笔记</title>
      <link href="/2019/01/05/pythonnote1/"/>
      <url>/2019/01/05/pythonnote1/</url>
      
        <content type="html"><![CDATA[<h3 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h3><h4 id="字符串：双引号或者单引号引起来的文本。"><a href="#字符串：双引号或者单引号引起来的文本。" class="headerlink" title="字符串：双引号或者单引号引起来的文本。"></a>字符串：双引号或者单引号引起来的文本。</h4><p>字符串内字符都有序号，正向是从0开始，反向是-1开始。str[-1]指的就是最后一个字符。</p><p>字符串的拼接：</p><ol><li><ul><li>号，对于字符串或者非字符串使用该符号就能拼接成一个字符串。</li></ul></li><li><p>.format()，中间的参数，对应字符串中的{}，相当于c语言里的占位符。</p></li></ol><h4 id="整数：python中整数的除法能得到小数，这一点与c不同。"><a href="#整数：python中整数的除法能得到小数，这一点与c不同。" class="headerlink" title="整数：python中整数的除法能得到小数，这一点与c不同。"></a>整数：python中整数的除法能得到小数，这一点与c不同。</h4><a id="more"></a><h4 id="布尔值：两个数据比较中产生布尔值。True-False"><a href="#布尔值：两个数据比较中产生布尔值。True-False" class="headerlink" title="布尔值：两个数据比较中产生布尔值。True False"></a>布尔值：两个数据比较中产生布尔值。True False</h4><pre><code>0、[]、{}、‘’没有内容的这些符号都代表了false。</code></pre><h4 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h4><p>s = [a1,a2,a3,a4]各个元素有自己的位置，从s[0]开始，位置又叫索引</p><p>列表不规定里面数据类型且不限定长度。</p><p>s[-1]表示倒数第一个元素，s[0:4]是s[0]-s[3]的元素，s[1:]是s[1]-s[3],s[:2]是s[0],s[1]</p><p>s.append(s[n])可把s[n]添加到s列表的尾部。</p><h4 id="字典："><a href="#字典：" class="headerlink" title="字典："></a>字典：</h4><p>d = {键1:值1,键2:值2} 通过字典的键取出对应的值。d[键1]==值1</p><h3 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h3><p>input():里面的内容相当于print可以输出出来，然后键入的数据能作为字符串类型赋给变量，</p><p>如果n=int(input(…))则要求输入的内容是int类型的，如果不是则会报错。</p><p>type函数，括号内加入变量，得到的结果<class 'int'="">这样的。</class></p><p>自定义函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x)</span>:</span>  </span><br><span class="line">    ......  </span><br><span class="line">fun(x)</span><br></pre></td></tr></table></figure><p>注意函数局部变量不能放到外面去使用。</p><p>python的缩进不能用掺杂空格，否则会报错unexpected indent</p><p>传入任意数量的实参：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deliver</span><span class="params">(*ele)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ele:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><p>形参名*ele中的星号让python创建一个元组，函数在实际使用时不管多少个实参都会传入这个元组中。若函数有多个形参，这类带星号的元组形参要放在最后，优先匹配其他形参。</p><p>同理，形参名前两个星号（**ele）能收集键值对，传入参数也是字典的形式,key=value</p><h3 id="控制流："><a href="#控制流：" class="headerlink" title="控制流："></a>控制流：</h3><h4 id="条件判断："><a href="#条件判断：" class="headerlink" title="条件判断："></a>条件判断：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if n1==n2:</span><br><span class="line">    .....</span><br><span class="line">elif n2==n3:</span><br><span class="line">    .....</span><br><span class="line">else:</span><br><span class="line">    .....</span><br></pre></td></tr></table></figure><h4 id="循环："><a href="#循环：" class="headerlink" title="循环："></a>循环：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while n1:             for i in 一堆数据:</span><br><span class="line">    ...                   .....</span><br></pre></td></tr></table></figure><p>for循环一般与range()一起使用，range(t)可生成0到t-1的整数序列，range(a,b)则是a到b-1</p><h4 id="异常处理："><a href="#异常处理：" class="headerlink" title="异常处理："></a>异常处理：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list=[0,1,2,3]</span><br><span class="line">for i in list:</span><br><span class="line">    try:</span><br><span class="line">        print(6/i)</span><br><span class="line">    except ZeroDivisionError(错误说明，也可以不写):</span><br><span class="line">        print(&apos;0不能为除数&apos;)</span><br></pre></td></tr></table></figure><h3 id="编码："><a href="#编码：" class="headerlink" title="编码："></a>编码：</h3><table><thead><tr><th style="text-align:center">编码表</th><th style="text-align:center">适用性</th><th style="text-align:center">特点</th></tr></thead><tbody><tr><td style="text-align:center">ASCII码</td><td style="text-align:center">英文，字符</td><td style="text-align:center">占用空间小</td></tr><tr><td style="text-align:center">GB2312码、GBK码</td><td style="text-align:center">支持中文</td><td style="text-align:center">GBK码是升级版</td></tr><tr><td style="text-align:center">Unicode码</td><td style="text-align:center">支持国际语言</td><td style="text-align:center">占用空间大，在ascii前补8个0就是</td></tr><tr><td style="text-align:center">UTF-8码</td><td style="text-align:center">支持国际语言</td><td style="text-align:center">Unicode的升级，占用空间小，ascii被包含其中</td></tr></tbody></table><h4 id="编码与解码："><a href="#编码与解码：" class="headerlink" title="编码与解码："></a>编码与解码：</h4><p>print(‘编码内容’.encode(‘编码表’)) (编码结果首位的b代表bytes字节类型的数据)。\x是分割符</p><p>print(解码内容.decode(‘编码表’)) 解码内容通常不是字符串，不必加引号</p><h4 id="获取单个字符的十进制整数编码："><a href="#获取单个字符的十进制整数编码：" class="headerlink" title="获取单个字符的十进制整数编码："></a>获取单个字符的十进制整数编码：</h4><p>print(ord(‘字’)，打印出这个字的十进制整数编码</p><p>print(chr(24561)),根据十进制再打印出对应的字</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>创建类用class声明，类一般第一个字母大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'...'</span>)</span><br></pre></td></tr></table></figure><p>如例子所示，类有一个<strong>init</strong>初始化方法，在生成实例的时候就会做，传入参数赋给属性，self代表传入该实例本身，因此在传入的时候不用写。</p><p>在使用类中的方法时要用‘.’来引用。</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>创建子类时，父类(超类)也必须在当前文件中，且位于子类前面，子类会继承父类中的所有属性和方法，定义子类时要在括号中填入父类的名称。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Dog)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        super.__init__(name,age)</span><br></pre></td></tr></table></figure></p><p>子类中可增加父类没有的方法和属性，当需要重写父类中某方法时，可一样写上这个方法，然后内容会覆盖父类中的方法。</p><h3 id="文件读写："><a href="#文件读写：" class="headerlink" title="文件读写："></a>文件读写：</h3><blockquote><p>file=open(‘地址’,’r’,encoding=’utf-8’)<br>filecontent=file.read()<br>filex=file.readlines()<br>print(filex)<br>file.close()  </p></blockquote><blockquote><p>file=open(‘地址’,’w’,encoding=’utf-8’)<br>file.write(‘内容\n’)<br>file.close()  </p></blockquote><blockquote><p>file=open(‘地址’,’a’,encoding=’utf-8’)<br>file.write(‘内容’)<br>file.close()  </p></blockquote><p><strong>读和写都是字符串类型，写和追加若没有文件，都会新建。只写会覆盖原文件，追加再末尾补充</strong></p><p><strong>光是r是只读文件，要关掉再用open再w方法才能再写文件。</strong></p><p><strong>如果要写入图片或音频之类二进制形式保存的文件，则用wb方法写入。</strong></p><p>readlines()读取的是一个字符串的列表，列表中每个字符串是文件中每一行，而且还有换行符。直接read()得到的是一整块不好处理数据，列表就好办了，可以用for…in遍历这个列表。</p><p>再用split()方法可以将列表中每行字符串再按空格切分成更小的字符串列表。</p><p>join()方法的用法是str.join(sequence),str是连接符，可以是’’也可以是’-‘，而sequence是数据序列，可以是列表。就能将列表元素拼接成一个字符串。</p><p>write()写入的必须是字符串，但是writelines()可以写入列表。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html超文本标记语言笔记</title>
      <link href="/2019/01/04/htmlnote1/"/>
      <url>/2019/01/04/htmlnote1/</url>
      
        <content type="html"><![CDATA[<h1 id="html超文本标记语言笔记（一）"><a href="#html超文本标记语言笔记（一）" class="headerlink" title="html超文本标记语言笔记（一）"></a>html超文本标记语言笔记（一）</h1><h2 id="一、html常用标签"><a href="#一、html常用标签" class="headerlink" title="一、html常用标签"></a>一、html常用标签</h2><p><code>&lt;html&gt; --网页开始 最后要有结束标签 &lt;/html&gt;</code></p><p><strong>结束标签一定不能忘了</strong></p><p><code>&lt;head&gt;</code> –网页头标签，里面可以加title标签修改网页的title，也可以用<code>&lt;meta charset=&quot;utf-8&quot;&gt;&lt;/meta&gt;</code>定义网页解码使用的码表。</p><p><code>&lt;body&gt; --网页主体 &lt;/body&gt;</code></p><a id="more"></a><p><code>&lt;h1&gt; 这是一个标题 &lt;h1&gt;</code> 共有大小六个标题格式，h1 to h6</p><p><code>&lt;a href=&quot;http://www.w3school.com.cn&quot;&gt;This is a link&lt;/a&gt;</code> –链接的表示。a标签不能嵌套a标签。</p><p><code>&lt;img src=&quot;w3school.jpg&quot; width=&quot;104&quot; height=&quot;142&quot; /&gt;</code> –图像的表示</p><p><code>&lt;p&gt;This is a paragraph.&lt;/p&gt;</code> –段落标识。p标签中不能套块级元素，否则会被截断成两个p标签。</p><p><code>&lt;br /&gt;</code> –换行符</p><p>当显示页面时，浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格。需要注意的是，HTML 代码中的所有连续的空行（换行）也被显示为一个空格。</p><p><code>&lt;hr /&gt;</code> –水平线用于分割内容</p><p>html编码:</p><p>常用的也就三个，用于在html文档中表示特殊字符。</p><ol><li><p>空格，html中n个空格也仅被看作一个空格，作为单词的切分符，于是用<code>&amp;nbsp;</code>来代替。</p></li><li><p>左尖角符，代表标签的开始，<code>&amp;lt;</code></p></li><li><p>右尖角符，代表标签的结束，<code>&amp;gt;</code></p></li></ol><blockquote><p>注释：浏览器会自动地在标题的前后添加空行。<br>注释：默认情况下，HTML 会自动地在块级元素前后添加一个额外的空行，比如段落、标题元素前后</p></blockquote><h2 id="二、html注释"><a href="#二、html注释" class="headerlink" title="二、html注释"></a>二、html注释</h2><p><code>&lt;!--This is a comment--&gt;</code> 注释的写法 </p><h2 id="三、html样式"><a href="#三、html样式" class="headerlink" title="三、html样式"></a>三、html样式</h2><h4 id="背景颜色-background-："><a href="#背景颜色-background-：" class="headerlink" title="背景颜色(background)："></a>背景颜色(background)：</h4><p>eg:</p><blockquote><p><code>&lt;body style=&quot;background-color:yellow&quot;&gt;</code><br><code>&lt;h2 style=&quot;background-color:red&quot;&gt;This is a heading&lt;/h2&gt;</code><br><code>&lt;p style=&quot;background-color:green&quot;&gt;This is a paragraph.&lt;/p&gt;</code></p></blockquote><h4 id="字体、颜色和尺寸-font-family-color-font-size-："><a href="#字体、颜色和尺寸-font-family-color-font-size-：" class="headerlink" title="字体、颜色和尺寸(font-family;color;font-size)："></a>字体、颜色和尺寸(font-family;color;font-size)：</h4><p>eg:</p><blockquote><p><code>&lt;h1 style=&quot;font-family:verdana&quot;&gt;A heading&lt;/h1&gt;</code></p></blockquote><blockquote><p><code>&lt;p style=&quot;font-family:arial;color:red;font-size:20px;&quot;&gt;A paragraph.&lt;/p&gt;</code></p></blockquote><h4 id="文本对齐-text-align-："><a href="#文本对齐-text-align-：" class="headerlink" title="文本对齐(text-align)："></a>文本对齐(text-align)：</h4><p>eg：</p><blockquote><p><code>&lt;h1 style=&quot;text-align:center&quot;&gt;This is a heading&lt;/h1&gt;</code></p></blockquote><h2 id="四、html格式化"><a href="#四、html格式化" class="headerlink" title="四、html格式化"></a>四、html格式化</h2><h4 id="常用的几种格式："><a href="#常用的几种格式：" class="headerlink" title="常用的几种格式："></a>常用的几种格式：</h4><table><thead><tr><th style="text-align:center">标签</th><th style="text-align:center">描述</th><th style="text-align:center">标签</th><th style="text-align:center">描述      </th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;b&gt;</code></td><td style="text-align:center">定义粗体文本</td><td style="text-align:center"><code>&lt;code&gt;</code></td><td style="text-align:center">定义计算机代码</td></tr><tr><td style="text-align:center"><code>&lt;big&gt;</code></td><td style="text-align:center">定义大号字</td><td style="text-align:center"><code>&lt;pre&gt;</code></td><td style="text-align:center">定义预格式文本</td></tr><tr><td style="text-align:center"><code>&lt;i&gt;</code></td><td style="text-align:center">定义斜体字</td><td style="text-align:center"><code>&lt;var&gt;</code></td><td style="text-align:center">定义变量</td></tr><tr><td style="text-align:center"><code>&lt;strong&gt;</code></td><td style="text-align:center">加粗</td><td style="text-align:center"><code>&lt;del&gt;</code></td><td style="text-align:center">删除线</td></tr></tbody></table><h2 id="五、html引用"><a href="#五、html引用" class="headerlink" title="五、html引用"></a>五、html引用</h2><p><code>&lt;q&gt;</code>和<code>&lt;/q&gt;</code>包围起来的文本称为短引用，文本两边会带上引号。</p><p><code>&lt;blockquote&gt;</code>和<code>&lt;/blockquote&gt;</code>包围起来的文本称为长引用，文本会进行缩进处理。</p><p>其他引用的格式：</p><table><thead><tr><th style="text-align:center">标签</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;address&gt;</code></td><td style="text-align:center">定义文档作者或拥有者的联系信息</td></tr><tr><td style="text-align:center"><code>&lt;cite&gt;</code></td><td style="text-align:center">定义著作的标题</td></tr><tr><td style="text-align:center"><code>&lt;abbr&gt;</code></td><td style="text-align:center">定义缩写或首字母缩略语</td></tr><tr><td style="text-align:center"><code>&lt;bdo&gt;</code></td><td style="text-align:center">定义文本方向</td></tr></tbody></table><h2 id="六、html链接"><a href="#六、html链接" class="headerlink" title="六、html链接"></a>六、html链接</h2><p><code>&lt;a href=&quot;(url)&quot;&gt;*words*&lt;/a&gt;</code> 最终点击words（甚至words可以替换成一张图片）可进入指定的url链接</p><blockquote><p>★如果在”url”后面再加上target=”_blank”，则是打开一个新窗口进入链接页面，就无需离开当前站点了。</p></blockquote><blockquote><p>注释：在url后面得跟上一个/，比如<code>http://www.baidu.com/</code>，不加上会向服务器两次请求。<br>在url前端加上/，比如/index.html，应该就是直接进本站的index.html界面。省略了前面的内容。</p></blockquote><h4 id="html的锚"><a href="#html的锚" class="headerlink" title="html的锚"></a>html的锚</h4><p>定义：<code>&lt;a name=&quot;*label*&quot;&gt;*ID*</code>`  由此定义了一个锚</p><p>调用：<code>&lt;a href=&quot;#*label*&quot;&gt;&lt;/a&gt;</code></p><p>当然也可以在url的末端写上#label,就可以直接转到链接页面的锚了。</p><h2 id="七、html图像"><a href="#七、html图像" class="headerlink" title="七、html图像"></a>七、html图像</h2><p>在 HTML 中，图像由 <code>&lt;img&gt;</code> 标签定义。</p><p><code>&lt;img&gt;</code> 是空标签，意思是说，它只包含属性，并且没有闭合标签。</p><p>要在页面上显示图像，你需要使用源属性（src）。src 指 “source”。源属性的值是图像的 URL 地址。</p><p>定义图像的语法是：</p><p><code>&lt;img src=&quot;url&quot; /&gt;</code></p><p>URL 指存储图像的位置。如果名为 “boat.gif” 的图像位于 <code>www.w3school.com.cn</code> 的 images 目录中，那么其 URL 为 <code>http://www.w3school.com.cn/images/boat.gif</code>。</p><p><code>&lt;title=&quot;&quot;&gt;</code>图片提示符，鼠标挪过去就会显示的提示。</p><p><code>&lt;alt=&quot;&#39;&gt;</code>图片占位符，如果图片显示不出来，就会显示这里的文字。</p><p><code>&lt;p&gt;</code>图像 <code>&lt;img src =&quot;/i/eg_cute.gif&quot; align=&quot;top/bottom/center/left/right&quot;&gt;</code> 在文本中<code>&lt;/p&gt;</code></p><p>当然写属性的地方也可以控制图像的大小 如width=”50” height=”50”</p><h2 id="八、html列表"><a href="#八、html列表" class="headerlink" title="八、html列表"></a>八、html列表</h2><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。</p><p>无序列表始于 <code>&lt;ul&gt;</code> 标签。每个列表项始于 <code>&lt;li&gt;</code>。列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。</p><p><code>&lt;ur type=&quot;disc/circle/square&quot;&gt;</code> 分别是黑圆圈、白圆圈、黑方块</p><blockquote><p><code>&lt;ul&gt;</code><br><code>&lt;li&gt;Coffee&lt;/li&gt;</code><br><code>&lt;li&gt;Milk&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code>  </p></blockquote><ul><li>coffee</li><li>milk</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>同样，有序列表也是一列项目，列表项目使用数字进行标记。</p><p>有序列表始于 <code>&lt;ol&gt;</code> 标签。每个列表项始于 <code>&lt;li&gt;</code> 标签。</p><p>标签ol后面可以加个type，代表列表的样式，共有五种，不写默认数字，写法为<code>&lt;ol type=&quot;1/a/A/i/I&quot;&gt;</code>.其中i和I代表罗马数字。</p><p>如果要倒序排，可加一句<code>reversed=&quot;reversed&quot;</code>.如果要设定从第3个开始排，就加一句start=”3”，无论你是哪种类型，都能用数字去取start。</p><blockquote><p><code>&lt;ol&gt;</code><br><code>&lt;li&gt;Coffee&lt;/li&gt;</code><br><code>&lt;li&gt;Milk&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code>  </p></blockquote><ol><li>coffee</li><li>milk</li></ol><h2 id="九、html块"><a href="#九、html块" class="headerlink" title="九、html块"></a>九、html块</h2><h4 id="html块元素"><a href="#html块元素" class="headerlink" title="html块元素"></a>html块元素</h4><p>块级元素在浏览器显示时，通常会以新行来开始（和结束）。例子：<code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;table&gt;</code>, <code>&lt;div&gt;</code></p><p>内联元素在显示时通常不会以新行开始。例子：<code>&lt;b&gt;</code>, <code>&lt;td&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;span&gt;</code></p><p><code>&lt;div&gt;</code>它是可用于组合其他 HTML 元素的容器。有换行效果，而span没有。</p><p><code>&lt;span&gt;</code>可用作文本的容器。这两者都没有特定含义。</p><h2 id="十、html表单"><a href="#十、html表单" class="headerlink" title="十、html表单"></a>十、html表单</h2><p>1.文本输入 <code>&lt;input type=&quot;text&quot;&gt;</code>,就出现一个文本输入框。得有name才能正确提交。如果再写上value值，就是文本框中默认的内容。<br>2.密码输入，将type改为password，输入内容变为暗码，要有name才能正确提交<br>3.单选按钮，将type类型写成radio。不过在type后面还得追加name和value，name相同的作为同一个单选题的选项，而value代表提交的值。<br>4.多选按钮  type类型为checkbox，每个项都得有name和value，name相同value不同。<br>5.提交按钮，type类型为submit，其value的值就是显示在按钮上的字，不写默认为提交。<br>6.下拉列表，<code>&lt;select name=&quot;&quot;&gt;</code> 然后接下来子块标签都是<code>&lt;option value=&quot;&quot;&gt;</code><br>7.文本域，<code>&lt;textarea name=&quot;&quot; rows=&quot;&quot; cols=&quot;&quot;&gt;</code>,可分行分段输入。<br>8.按钮，<code>&lt;button type=&quot;button&quot; onclick=&quot;alert(&#39;&#39;)&quot;&gt;</code>Click me!<code>&lt;/button&gt;</code>,alert中的内容就是弹出框的内容，中间的文本是按钮上面的文字。<br>9.只读属性，readonly这个属性可以规定文本输入只读，即不能修改。<br>10.禁用属性，disabled这个属性不准对文本框操作，背景深灰色。</p><p>ps: 这篇笔记真是折腾我够久啊，一直给我报错，百度了n次也搜不到原因，拿掉这个md文件就不报错，那就是这个文件的问题，frontmatter抄了之前的也还是报错，那就是正文的原因，然后我删掉大部分剩下一点点放上去，问题就了然了——markdown和html之间的矛盾（是vscode预览器害了我啊，让我以为在标签前面加上一个反斜杠就能正常输出，实际上不行，对于标签要用<code>...</code>单引号给括起来才行，至少最后总算解决了这个麻烦。唉。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太网没有有效的IP配置解决方案</title>
      <link href="/2019/01/03/1231solution/"/>
      <url>/2019/01/03/1231solution/</url>
      
        <content type="html"><![CDATA[<p>昨天刚解决720的错误，今天莫名其妙错误1231，即使连接了手机热点也没法访问网络。运行系统自带的疑难解答，得知是以太网没有有效的IP配置。<br><a id="more"></a><br>然后网上清一色的告诉你IPV4协议去改个自动，然而没啥卵用，本来就是自动获取IP的。<br>浏览了好一会儿才终于找到了解决方法。</p><h4 id="1、打开运行，输入services-msc，进入服务界面。"><a href="#1、打开运行，输入services-msc，进入服务界面。" class="headerlink" title="1、打开运行，输入services.msc，进入服务界面。"></a>1、打开<strong>运行</strong>，输入<em>services.msc</em>，进入服务界面。</h4><h4 id="2、在服务界面分别把wired-auto-config和WLAN-auto-config两个服务启动。"><a href="#2、在服务界面分别把wired-auto-config和WLAN-auto-config两个服务启动。" class="headerlink" title="2、在服务界面分别把wired auto config和WLAN auto config两个服务启动。"></a>2、在服务界面分别把<em>wired auto config</em>和<em>WLAN auto config</em>两个服务启动。</h4><h4 id="3、然后在网络适配器禁用以太网，再重新启动。"><a href="#3、然后在网络适配器禁用以太网，再重新启动。" class="headerlink" title="3、然后在网络适配器禁用以太网，再重新启动。"></a>3、然后在网络适配器禁用以太网，再重新启动。</h4><h4 id="4、以管理员身份运行cmd，输入netsh-winsock-reset。"><a href="#4、以管理员身份运行cmd，输入netsh-winsock-reset。" class="headerlink" title="4、以管理员身份运行cmd，输入netsh winsock reset。"></a>4、以管理员身份运行cmd，输入<em>netsh winsock reset</em>。</h4><h4 id="5、它会提示：成功地重置Winsock目录，然后重启电脑即可。"><a href="#5、它会提示：成功地重置Winsock目录，然后重启电脑即可。" class="headerlink" title="5、它会提示：成功地重置Winsock目录，然后重启电脑即可。"></a>5、它会提示：成功地重置Winsock目录，然后重启电脑即可。</h4>]]></content>
      
      
      <categories>
          
          <category> solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宽带连接错误代码720解决方案</title>
      <link href="/2019/01/02/720solution/"/>
      <url>/2019/01/02/720solution/</url>
      
        <content type="html"><![CDATA[<h2 id="720：不能建立到远程计算机的连接。你可能需要更改此连接的网络设置。"><a href="#720：不能建立到远程计算机的连接。你可能需要更改此连接的网络设置。" class="headerlink" title="720：不能建立到远程计算机的连接。你可能需要更改此连接的网络设置。"></a>720：不能建立到远程计算机的连接。你可能需要更改此连接的网络设置。</h2><a id="more"></a><p>客户端若出现这种错误，可以使用网络诊断推荐的方案：<strong>网络重置</strong>。五分钟后自动重启再试可能成功。<br>但若不成功，可以用第二种方法。</p><p>从<strong>设备管理器</strong>中找到网络适配器，卸载掉其中所有以WAN开头的驱动。<br>卸载完后再选择列表第一个选项（DESKTOP-85COU5J)，右击选择<strong>扫描检测硬件改动</strong>。再试应该就成功了！</p>]]></content>
      
      
      <categories>
          
          <category> solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
