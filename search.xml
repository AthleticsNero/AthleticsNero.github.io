<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pythonnote2</title>
      <link href="/2019/01/18/pythonnote2/"/>
      <url>/2019/01/18/pythonnote2/</url>
      
        <content type="html"><![CDATA[<h2 id="python爬虫笔记"><a href="#python爬虫笔记" class="headerlink" title="python爬虫笔记"></a>python爬虫笔记</h2><p>爬虫分为四个步骤，首先获取数据，然后解析数据，再提取数据，最后是存储数据</p><a id="more"></a><p><img src="/18/pythonnote2/source/_posts/pythonnote2/pic1.png" alt="前三个步骤的示意图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests #首先引入requests库</span><br><span class="line">res=requests.get(&apos;URL&apos;)#向服务器发送了一个请求,把服务器响应结果赋给res，为response对象</span><br><span class="line">res.encoding=&apos;gbk&apos; #定义response对象的编码，一般会自己判断不必写，如果错误则补上正确的码表</span><br><span class="line">pic=res.content #获取二进制数据</span><br><span class="line">note=res.text #获取字符串数据</span><br><span class="line">print(res.status_code)检查是否请求成功，成功则为200</span><br><span class="line">k=open(&apos;note.txt&apos;,&apos;a+&apos;) #将res.text内容写在note.txt文件末尾</span><br><span class="line">m=open(&apos;pic.jpg&apos;或&apos;music.mp3&apos;,&apos;wb&apos;) #以二进制形式生成图片或音频</span><br><span class="line">k.write(pic\note)</span><br><span class="line">k.close() #基本文件读写操作</span><br></pre></td></tr></table></figure><p>以上是一般的获取数据的方法，接下来是用BeautifulSoup解析数据，从源码入手爬取数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup #引入bs库</span><br><span class="line">res=requests.get(&apos;URL&apos;)</span><br><span class="line">soup=BeautifulSoup(&apos;字符串数据,可以是res.text&apos;，&apos;html.parser&apos;) #解析数据，html.parser是解析器</span><br></pre></td></tr></table></figure><p>beautifulsoup提取数据的两个方法：</p><p>find()和find_all(),find()找到满足条件的首个数据，参数可以是标签和属性，find_all则是所有符合的数据，生成的自然是一个列表</p><p><strong>属性如果是class，则要在class后面加个_防止被编译器识别为关键字。</strong></p><p>Tag对象，提取出的单个数据的类是Tag，其主要用法有三种：</p><ol><li>tag.find()用来提取tag中的tag，由父级标签提取子级标签</li><li>tag.text提取tag中的文字，可以忽略标签信息</li><li>tag[‘属性名’]提取tag中这个属性的值，不过只能仅限这个tag的标签，不包含内部标签</li></ol>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python笔记（一）</title>
      <link href="/2019/01/05/pythonnote1/"/>
      <url>/2019/01/05/pythonnote1/</url>
      
        <content type="html"><![CDATA[<h3 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h3><h4 id="字符串：双引号或者单引号引起来的文本。"><a href="#字符串：双引号或者单引号引起来的文本。" class="headerlink" title="字符串：双引号或者单引号引起来的文本。"></a>字符串：双引号或者单引号引起来的文本。</h4><p>拼接字符串使用“+”号，要将非字符串类型的数据用str()强制变换。</p><h4 id="整数：python中整数的除法能得到小数，这一点与c不同。"><a href="#整数：python中整数的除法能得到小数，这一点与c不同。" class="headerlink" title="整数：python中整数的除法能得到小数，这一点与c不同。"></a>整数：python中整数的除法能得到小数，这一点与c不同。</h4><a id="more"></a><h4 id="布尔值：两个数据比较中产生布尔值。True-False"><a href="#布尔值：两个数据比较中产生布尔值。True-False" class="headerlink" title="布尔值：两个数据比较中产生布尔值。True False"></a>布尔值：两个数据比较中产生布尔值。True False</h4><pre><code>0、[]、{}、‘’没有内容的这些符号都代表了false。</code></pre><h4 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h4><p>s = [a1,a2,a3,a4]各个元素有自己的位置，从s[0]开始，位置又叫索引</p><p>列表不规定里面数据类型且不限定长度。</p><p>s[-1]表示倒数第一个元素，s[0:4]是s[0]-s[3]的元素，s[1:]是s[1]-s[3],s[:2]是s[0],s[1]</p><p>s.append(s[n])可把s[n]添加到s列表的尾部。</p><h4 id="字典："><a href="#字典：" class="headerlink" title="字典："></a>字典：</h4><p>d = {键1:值1,键2:值2} 通过字典的键取出对应的值。d[键1]==值1</p><h3 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h3><p>input():里面的内容相当于print可以输出出来，然后键入的数据能作为字符串类型赋给变量，</p><p>如果n=int(input(…))则要求输入的内容是int类型的，如果不是则会报错。</p><p>type函数，括号内加入变量，得到的结果<class 'int'="">这样的。</class></p><p>自定义函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def fun(x):  </span><br><span class="line">    ......  </span><br><span class="line">fun(x)</span><br></pre></td></tr></table></figure><p>注意函数局部变量不能放到外面去使用。</p><p>python的缩进不能用掺杂空格，否则会报错unexpected indent</p><h3 id="控制流："><a href="#控制流：" class="headerlink" title="控制流："></a>控制流：</h3><h4 id="条件判断："><a href="#条件判断：" class="headerlink" title="条件判断："></a>条件判断：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if n1==n2:</span><br><span class="line">    .....</span><br><span class="line">elif n2==n3:</span><br><span class="line">    .....</span><br><span class="line">else:</span><br><span class="line">    .....</span><br></pre></td></tr></table></figure><h4 id="循环："><a href="#循环：" class="headerlink" title="循环："></a>循环：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while n1:             for i in 一堆数据:</span><br><span class="line">    ...                   .....</span><br></pre></td></tr></table></figure><p>for循环一般与range()一起使用，range(t)可生成0到t-1的整数序列，range(a,b)则是a到b-1</p><h4 id="异常处理："><a href="#异常处理：" class="headerlink" title="异常处理："></a>异常处理：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list=[0,1,2,3]</span><br><span class="line">for i in list:</span><br><span class="line">    try:</span><br><span class="line">        print(6/i)</span><br><span class="line">    except ZeroDivisionError(错误说明，也可以不写):</span><br><span class="line">        print(&apos;0不能为除数&apos;)</span><br></pre></td></tr></table></figure><h3 id="编码："><a href="#编码：" class="headerlink" title="编码："></a>编码：</h3><table><thead><tr><th style="text-align:center">编码表</th><th style="text-align:center">适用性</th><th style="text-align:center">特点</th></tr></thead><tbody><tr><td style="text-align:center">ASCII码</td><td style="text-align:center">英文，字符</td><td style="text-align:center">占用空间小</td></tr><tr><td style="text-align:center">GB2312码、GBK码</td><td style="text-align:center">支持中文</td><td style="text-align:center">GBK码是升级版</td></tr><tr><td style="text-align:center">Unicode码</td><td style="text-align:center">支持国际语言</td><td style="text-align:center">占用空间大，在ascii前补8个0就是</td></tr><tr><td style="text-align:center">UTF-8码</td><td style="text-align:center">支持国际语言</td><td style="text-align:center">Unicode的升级，占用空间小，ascii被包含其中</td></tr></tbody></table><h4 id="编码与解码："><a href="#编码与解码：" class="headerlink" title="编码与解码："></a>编码与解码：</h4><p>print(‘编码内容’.encode(‘编码表’)) (编码结果首位的b代表bytes字节类型的数据)。\x是分割符</p><p>print(解码内容.decode(‘编码表’)) 解码内容通常不是字符串，不必加引号</p><h4 id="获取单个字符的十进制整数编码："><a href="#获取单个字符的十进制整数编码：" class="headerlink" title="获取单个字符的十进制整数编码："></a>获取单个字符的十进制整数编码：</h4><p>print(ord(‘字’)，打印出这个字的十进制整数编码</p><p>print(chr(24561)),根据十进制再打印出对应的字</p><h3 id="文件读写："><a href="#文件读写：" class="headerlink" title="文件读写："></a>文件读写：</h3><blockquote><p>file=open(‘地址’,’r’,encoding=’utf-8’)<br>filecontent=file.read()<br>filex=file.readlines()<br>print(filex)<br>file.close()  </p></blockquote><blockquote><p>file=open(‘地址’,’w’,encoding=’utf-8’)<br>file.write(‘内容\n’)<br>file.close()  </p></blockquote><blockquote><p>file=open(‘地址’,’a’,encoding=’utf-8’)<br>file.write(‘内容’)<br>file.close()  </p></blockquote><p><strong>读和写都是字符串类型，写和追加若没有文件，都会新建。只写会覆盖原文件，追加再末尾补充</strong></p><p><strong>光是r是只读文件，要关掉再用open再w方法才能再写文件。</strong></p><p><strong>如果要写入图片或音频之类二进制形式保存的文件，则用wb方法写入。</strong></p><p>readlines()读取的是一个字符串的列表，列表中每个字符串是文件中每一行，而且还有换行符。直接read()得到的是一整块不好处理数据，列表就好办了，可以用for…in遍历这个列表。</p><p>再用split()方法可以将列表中每行字符串再按空格切分成更小的字符串列表。</p><p>join()方法的用法是str.join(sequence),str是连接符，可以是’’也可以是’-‘，而sequence是数据序列，可以是列表。就能将列表元素拼接成一个字符串。</p><p>write()写入的必须是字符串，但是writelines()可以写入列表。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html超文本标记语言笔记1</title>
      <link href="/2019/01/04/htmlnote1/"/>
      <url>/2019/01/04/htmlnote1/</url>
      
        <content type="html"><![CDATA[<h1 id="html超文本标记语言笔记（一）"><a href="#html超文本标记语言笔记（一）" class="headerlink" title="html超文本标记语言笔记（一）"></a>html超文本标记语言笔记（一）</h1><h2 id="一、html常用标签"><a href="#一、html常用标签" class="headerlink" title="一、html常用标签"></a>一、html常用标签</h2><p><code>&lt;html&gt; --网页开始 最后要有结束标签 &lt;/html&gt;</code></p><p><strong>结束标签一定不能忘了</strong></p><p><code>&lt;body&gt; --网页主体 &lt;/body&gt;</code></p><a id="more"></a><p><code>&lt;h1&gt; 这是一个标题 &lt;h1&gt;</code> 共有大小六个标题格式，h1 to h6</p><p><code>&lt;a href=&quot;http://www.w3school.com.cn&quot;&gt;This is a link&lt;/a&gt;</code> –链接的表示 结束标签</p><p><code>&lt;img src=&quot;w3school.jpg&quot; width=&quot;104&quot; height=&quot;142&quot; /&gt;</code> –图像的表示</p><p><code>&lt;p&gt;This is a paragraph.&lt;/p&gt;</code> –段落标识</p><p><code>&lt;br /&gt;</code> –换行符</p><p>当显示页面时，浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格。需要注意的是，HTML 代码中的所有连续的空行（换行）也被显示为一个空格。</p><p><code>&lt;hr /&gt;</code> –水平线用于分割内容</p><blockquote><p>注释：浏览器会自动地在标题的前后添加空行。<br>注释：默认情况下，HTML 会自动地在块级元素前后添加一个额外的空行，比如段落、标题元素前后</p></blockquote><h2 id="二、html注释"><a href="#二、html注释" class="headerlink" title="二、html注释"></a>二、html注释</h2><p><code>&lt;!--This is a comment--&gt;</code> 注释的写法 </p><h2 id="三、html样式"><a href="#三、html样式" class="headerlink" title="三、html样式"></a>三、html样式</h2><h4 id="背景颜色-background-："><a href="#背景颜色-background-：" class="headerlink" title="背景颜色(background)："></a>背景颜色(background)：</h4><p>eg:</p><blockquote><p><code>&lt;body style=&quot;background-color:yellow&quot;&gt;</code><br><code>&lt;h2 style=&quot;background-color:red&quot;&gt;This is a heading&lt;/h2&gt;</code><br><code>&lt;p style=&quot;background-color:green&quot;&gt;This is a paragraph.&lt;/p&gt;</code></p></blockquote><h4 id="字体、颜色和尺寸-font-family-color-font-size-："><a href="#字体、颜色和尺寸-font-family-color-font-size-：" class="headerlink" title="字体、颜色和尺寸(font-family;color;font-size)："></a>字体、颜色和尺寸(font-family;color;font-size)：</h4><p>eg:</p><blockquote><p><code>&lt;h1 style=&quot;font-family:verdana&quot;&gt;A heading&lt;/h1&gt;</code></p></blockquote><blockquote><p><code>&lt;p style=&quot;font-family:arial;color:red;font-size:20px;&quot;&gt;A paragraph.&lt;/p&gt;</code></p></blockquote><h4 id="文本对齐-text-align-："><a href="#文本对齐-text-align-：" class="headerlink" title="文本对齐(text-align)："></a>文本对齐(text-align)：</h4><p>eg：</p><blockquote><p><code>&lt;h1 style=&quot;text-align:center&quot;&gt;This is a heading&lt;/h1&gt;</code></p></blockquote><h2 id="四、html格式化"><a href="#四、html格式化" class="headerlink" title="四、html格式化"></a>四、html格式化</h2><h4 id="常用的几种格式："><a href="#常用的几种格式：" class="headerlink" title="常用的几种格式："></a>常用的几种格式：</h4><table><thead><tr><th style="text-align:center">标签</th><th style="text-align:center">描述</th><th style="text-align:center">标签</th><th style="text-align:center">描述      </th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;b&gt;</code></td><td style="text-align:center">定义粗体文本</td><td style="text-align:center"><code>&lt;code&gt;</code></td><td style="text-align:center">定义计算机代码</td></tr><tr><td style="text-align:center"><code>&lt;big&gt;</code></td><td style="text-align:center">定义大号字</td><td style="text-align:center"><code>&lt;pre&gt;</code></td><td style="text-align:center">定义预格式文本</td></tr><tr><td style="text-align:center"><code>&lt;i&gt;</code></td><td style="text-align:center">定义斜体字</td><td style="text-align:center"><code>&lt;var&gt;</code></td><td style="text-align:center">定义变量</td></tr></tbody></table><h2 id="五、html引用"><a href="#五、html引用" class="headerlink" title="五、html引用"></a>五、html引用</h2><p><code>&lt;q&gt;</code>和<code>&lt;/q&gt;</code>包围起来的文本称为短引用，文本两边会带上引号。</p><p><code>&lt;blockquote&gt;</code>和<code>&lt;/blockquote&gt;</code>包围起来的文本称为长引用，文本会进行缩进处理。</p><p>其他引用的格式：</p><table><thead><tr><th style="text-align:center">标签</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;address&gt;</code></td><td style="text-align:center">定义文档作者或拥有者的联系信息</td></tr><tr><td style="text-align:center"><code>&lt;cite&gt;</code></td><td style="text-align:center">定义著作的标题</td></tr><tr><td style="text-align:center"><code>&lt;abbr&gt;</code></td><td style="text-align:center">定义缩写或首字母缩略语</td></tr><tr><td style="text-align:center"><code>&lt;bdo&gt;</code></td><td style="text-align:center">定义文本方向</td></tr></tbody></table><h2 id="六、html链接"><a href="#六、html链接" class="headerlink" title="六、html链接"></a>六、html链接</h2><p><code>&lt;a href=&quot;(url)&quot;&gt;*words*&lt;/a&gt;</code> 最终点击words（甚至words可以替换成一张图片）可进入指定的url链接</p><blockquote><p>★如果在”url”后面再加上target=”_blank”，则是打开一个新窗口进入链接页面，就无需离开当前站点了。</p></blockquote><blockquote><p>注释：在url后面得跟上一个/，比如<code>http://www.baidu.com/</code>，不加上会向服务器两次请求。<br>在url前端加上/，比如/index.html，应该就是直接进本站的index.html界面。省略了前面的内容。</p></blockquote><h4 id="html的锚"><a href="#html的锚" class="headerlink" title="html的锚"></a>html的锚</h4><p>定义：<code>&lt;a name=&quot;*label*&quot;&gt;*ID*</code>`  由此定义了一个锚</p><p>调用：<code>&lt;a href=&quot;#*label*&quot;&gt;&lt;/a&gt;</code></p><p>当然也可以在url的末端写上#label,就可以直接转到链接页面的锚了。</p><h2 id="七、html图像"><a href="#七、html图像" class="headerlink" title="七、html图像"></a>七、html图像</h2><p>在 HTML 中，图像由 <code>&lt;img&gt;</code> 标签定义。</p><p><code>&lt;img&gt;</code> 是空标签，意思是说，它只包含属性，并且没有闭合标签。</p><p>要在页面上显示图像，你需要使用源属性（src）。src 指 “source”。源属性的值是图像的 URL 地址。</p><p>定义图像的语法是：</p><p><code>&lt;img src=&quot;url&quot; /&gt;</code><br>URL 指存储图像的位置。如果名为 “boat.gif” 的图像位于 <code>www.w3school.com.cn</code> 的 images 目录中，那么其 URL 为 <code>http://www.w3school.com.cn/images/boat.gif</code>。</p><p><code>&lt;p&gt;</code>图像 <code>&lt;img src =&quot;/i/eg_cute.gif&quot; align=&quot;top/bottom/center/left/right&quot;&gt;</code> 在文本中<code>&lt;/p&gt;</code></p><p>当然写属性的地方也可以控制图像的大小 如width=”50” height=”50”</p><h2 id="八、html列表"><a href="#八、html列表" class="headerlink" title="八、html列表"></a>八、html列表</h2><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。</p><p>无序列表始于 <code>&lt;ul&gt;</code> 标签。每个列表项始于 <code>&lt;li&gt;</code>。列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。</p><p><code>&lt;ur type=&quot;disc/circle/square&quot;&gt;</code> 分别是黑圆圈、白圆圈、黑方块</p><blockquote><p><code>&lt;ul&gt;</code><br><code>&lt;li&gt;Coffee&lt;/li&gt;</code><br><code>&lt;li&gt;Milk&lt;/li&gt;</code><br><code>&lt;/ul&gt;</code>  </p></blockquote><ul><li>coffee</li><li>milk</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>同样，有序列表也是一列项目，列表项目使用数字进行标记。</p><p>有序列表始于 <code>&lt;ol&gt;</code> 标签。每个列表项始于 <code>&lt;li&gt;</code> 标签。</p><blockquote><p><code>&lt;ol&gt;</code><br><code>&lt;li&gt;Coffee&lt;/li&gt;</code><br><code>&lt;li&gt;Milk&lt;/li&gt;</code><br><code>&lt;/ol&gt;</code>  </p></blockquote><ol><li>coffee</li><li>milk</li></ol><h2 id="九、html块"><a href="#九、html块" class="headerlink" title="九、html块"></a>九、html块</h2><h4 id="html块元素"><a href="#html块元素" class="headerlink" title="html块元素"></a>html块元素</h4><p>块级元素在浏览器显示时，通常会以新行来开始（和结束）。例子：<code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;table&gt;</code>, <code>&lt;div&gt;</code></p><p>内联元素在显示时通常不会以新行开始。例子：<code>&lt;b&gt;</code>, <code>&lt;td&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;span&gt;</code></p><p><code>&lt;div&gt;</code>它是可用于组合其他 HTML 元素的容器。<br><code>&lt;span&gt;</code>可用作文本的容器。这两者都没有特定含义。</p><p>ps: 这篇笔记真是折腾我够久啊，一直给我报错，百度了n次也搜不到原因，拿掉这个md文件就不报错，那就是这个文件的问题，frontmatter抄了之前的也还是报错，那就是正文的原因，然后我删掉大部分剩下一点点放上去，问题就了然了——markdown和html之间的矛盾（是vscode预览器害了我啊，让我以为在标签前面加上一个反斜杠就能正常输出，实际上不行，对于标签要用<code>...</code>单引号给括起来才行，至少最后总算解决了这个麻烦。唉。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太网没有有效的IP配置解决方案</title>
      <link href="/2019/01/03/1231solution/"/>
      <url>/2019/01/03/1231solution/</url>
      
        <content type="html"><![CDATA[<p>昨天刚解决720的错误，今天莫名其妙错误1231，即使连接了手机热点也没法访问网络。运行系统自带的疑难解答，得知是以太网没有有效的IP配置。<br><a id="more"></a><br>然后网上清一色的告诉你IPV4协议去改个自动，然而没啥卵用，本来就是自动获取IP的。<br>浏览了好一会儿才终于找到了解决方法。</p><h4 id="1、打开运行，输入services-msc，进入服务界面。"><a href="#1、打开运行，输入services-msc，进入服务界面。" class="headerlink" title="1、打开运行，输入services.msc，进入服务界面。"></a>1、打开<strong>运行</strong>，输入<em>services.msc</em>，进入服务界面。</h4><h4 id="2、在服务界面分别把wired-auto-config和WLAN-auto-config两个服务启动。"><a href="#2、在服务界面分别把wired-auto-config和WLAN-auto-config两个服务启动。" class="headerlink" title="2、在服务界面分别把wired auto config和WLAN auto config两个服务启动。"></a>2、在服务界面分别把<em>wired auto config</em>和<em>WLAN auto config</em>两个服务启动。</h4><h4 id="3、然后在网络适配器禁用以太网，再重新启动。"><a href="#3、然后在网络适配器禁用以太网，再重新启动。" class="headerlink" title="3、然后在网络适配器禁用以太网，再重新启动。"></a>3、然后在网络适配器禁用以太网，再重新启动。</h4><h4 id="4、以管理员身份运行cmd，输入netsh-winsock-reset。"><a href="#4、以管理员身份运行cmd，输入netsh-winsock-reset。" class="headerlink" title="4、以管理员身份运行cmd，输入netsh winsock reset。"></a>4、以管理员身份运行cmd，输入<em>netsh winsock reset</em>。</h4><h4 id="5、它会提示：成功地重置Winsock目录，然后重启电脑即可。"><a href="#5、它会提示：成功地重置Winsock目录，然后重启电脑即可。" class="headerlink" title="5、它会提示：成功地重置Winsock目录，然后重启电脑即可。"></a>5、它会提示：成功地重置Winsock目录，然后重启电脑即可。</h4>]]></content>
      
      
      <categories>
          
          <category> solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宽带连接错误代码720解决方案</title>
      <link href="/2019/01/02/720solution/"/>
      <url>/2019/01/02/720solution/</url>
      
        <content type="html"><![CDATA[<h2 id="720：不能建立到远程计算机的连接。你可能需要更改此连接的网络设置。"><a href="#720：不能建立到远程计算机的连接。你可能需要更改此连接的网络设置。" class="headerlink" title="720：不能建立到远程计算机的连接。你可能需要更改此连接的网络设置。"></a>720：不能建立到远程计算机的连接。你可能需要更改此连接的网络设置。</h2><a id="more"></a><p>客户端若出现这种错误，可以使用网络诊断推荐的方案：<strong>网络重置</strong>。五分钟后自动重启再试可能成功。<br>但若不成功，可以用第二种方法。</p><p>从<strong>设备管理器</strong>中找到网络适配器，卸载掉其中所有以WAN开头的驱动。<br>卸载完后再选择列表第一个选项（DESKTOP-85COU5J)，右击选择<strong>扫描检测硬件改动</strong>。再试应该就成功了！</p>]]></content>
      
      
      <categories>
          
          <category> solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
